-- Autogenerated with DRAKON Editor 1.32
require('strict').on()



local table = table
local string = string
local pairs = pairs
local ipairs = ipairs
local io = io
local pcall = pcall
local xpcall = xpcall
local debug = debug
local math = math
local tostring = tostring
local clock = require("clock")
local log = require("log")
local digest = require("digest")
local fiber = require("fiber")
local json = require("json")
local fio = require("fio")
local log = require("log")
local os = os
local error = error
local print = print

local utf8 = require("lua-utf8")

local vud = require("vud")
local space = require("space")
local utils = require("utils")
local trans = require("trans")
local mail = require("mail")
local ej = require("ej")
local lic = require("lic")
--local pay = require("pay")
--local payex = require("payex")
local get_tarantool_status = get_tarantool_status

-- configuration
local global_cfg = global_cfg
local price_cfg = price_cfg
local external_creds = external_creds

local http = require("http.server")
local http_client = require('http.client').new({max_connections = 5})

local http_router = require('http.router')

local httpd = nil
local router = nil

local greq = nil

local api_handlers = {}
local file_cache = {}
local ping_files = {}

local g_content = {}
g_content["ru"] = {}
g_content["en-us"] = {}

local language_list = {}
language_list["en"] = "en-us"
language_list["en-us"] = "en-us"
language_list["en-gb"] = "en-us"
language_list["ru"] = "ru"
language_list["ru-ru"] = "ru"

local WARNING_BEFORE = utils.days_to_secs(7)
local AUTOPAY_RETRIES = 3
local AUTOPAY_RETRY_DELAY_SEC = 3600

local db = require(global_cfg.db)

setfenv(1, {}) 

local module = nil

function add_diagram(data)
    -- item 1463
    if ((data.section == "deditor") and (not (utils.is_empty(data.spaceId)))) and (not (utils.is_empty(data.folderId))) then
        -- item 1466
        local ok, result = space.get_folder(
        	data.spaceId,
        	data.folderId,
        	false,
        	"system",
        	true
        )
        -- item 1467
        if ok then
            -- item 1471
            data.diagram = result
        end
    end
end

function already_logged_handler(req, session, headers)
    -- item 559
    return make_json_error(400, headers, "ERR_ALREADY_LOGGED_ON")
end

function api(api_method, method, must_logon, must_admin, handler)
    -- item 212
    local key = api_method .. "/" .. method
    -- item 210
    local handler_info = {
    	must_logon = must_logon,
    	must_admin = must_admin,
    	handler = handler
    }
    -- item 211
    api_handlers[key] = handler_info
end

function api_access(req, session, headers)
    -- item 923
    local data = req:json()
    -- item 925
    local grant = (req:method() == "POST")
    -- item 916
    local msg = space.access(
    	data,
    	grant,
    	session.user_id,
    	session.admin
    )
    -- item 918
    if msg then
        -- item 921
        return result_from_message(headers, msg)
    else
        -- item 924
        return make_empty_response(headers)
    end
end

function api_account(req, session, headers)
    -- item 570
    local user = vud.get_user(session.user_id)
    -- item 572
    if user then
        -- item 576
        local data = {
        	user_id = user.user_id,
        	name = user.name,
        	email = user.email,
        	block_email = user.block_email,
        	is_admin = user.admin,
        	is_active = user.enabled
        }
        -- item 4918
        get_access_for_user(
        	session.user_id,
        	data
        )
        -- item 577
        return make_json_success(headers, data)
    else
        -- item 575
        return make_json_error(404, headers, "ERR_USER_NOT_FOUND")
    end
end

function api_check_trans(req, session, headers)
    -- item 2361
    local trans_id = req:stash("first")
    -- item 2335
    local trans = get_completed_trans(
    	session.user_id,
    	trans_id
    )
    -- item 2363
    local data = {}
    -- item 2353
    if trans then
        -- item 2365
        if trans.status == "success" then
            -- item 2359
            data.result = "ok"
        else
            -- item 2367
            data.result = "ERR_PAYMENT_FAILED"
        end
    else
        -- item 2364
        data.result = "ERR_NOT_FOUND"
    end
    -- item 2360
    return make_json_success(headers, data)
end

function api_clear_trash(req, session, headers)
    -- item 897
    local space_id = req:stash("first")
    -- item 891
    local msg = space.clear_trash(
    	space_id,
    	session.user_id,
    	session.admin
    )
    -- item 893
    if msg then
        -- item 896
        return result_from_message(headers, msg)
    else
        -- item 898
        return make_empty_response(headers)
    end
end

function api_confirm_coupon(req, session, headers)
    -- item 2216
    local message
    -- item 2213
    db.begin()
    -- item 2209
    local data = req:json()
    -- item 2218
    if data.coupon then
        -- item 2212
        local coupon = lic.get_coupon(data.coupon)
        -- item 2221
        if coupon then
            -- item 2238
            local ok, details = calculate_payment(
            	coupon.product_id,
            	coupon.max_users,
            	nil
            )
            -- item 2250
            details.coupon = data.coupon
            -- item 2239
            if ok then
                -- item 2243
                local trans_id = create_transaction(
                	session.user_id,
                	"coupon",
                	details
                )
                -- item 2244
                details.trans_id = trans_id
                -- item 2214
                db.commit()
                -- item 2249
                ej.info(
                	"confirm_coupon",
                	{user_id=user_id, trans_id=trans_id,
                	coupon=data.coupon,
                	session_id=session.session_id}
                )
                -- item 2211
                return make_json_success(headers, details)
            else
                -- item 2242
                message = details
                -- item 2215
                db.rollback()
                -- item 2208
                return result_from_message(headers, message)
            end
        else
            -- item 2220
            message = "ERR_COUPON_NOT_FOUND"
            -- item 2215
            db.rollback()
            -- item 2208
            return result_from_message(headers, message)
        end
    else
        -- item 2220
        message = "ERR_COUPON_NOT_FOUND"
        -- item 2215
        db.rollback()
        -- item 2208
        return result_from_message(headers, message)
    end
end

function api_confirm_paid(req, session, headers)
    -- item 2389
    local message
    -- item 2386
    db.begin()
    -- item 2383
    local data = req:json()
    -- item 2390
    if (data.users) and (data.product_id) then
        -- item 2405
        local user = vud.get_user(session.user_id)
        -- item 2404
        local old_license = get_old_license(user.license)
        -- item 2394
        local ok, details = calculate_payment(
        	data.product_id,
        	data.users,
        	old_license
        )
        -- item 2395
        if ok then
            -- item 2399
            local trans_id = create_transaction(
            	session.user_id,
            	"payment",
            	details
            )
            -- item 2400
            details.trans_id = trans_id
            -- item 2387
            db.commit()
            -- item 2401
            ej.info(
            	"confirm_paid",
            	{user_id=user_id, trans_id=trans_id,
            	product_id=data.product_id, users=data.users,
            	session_id=session.session_id}
            )
            -- item 2384
            return make_json_success(headers, details)
        else
            -- item 2398
            message = details
            -- item 2388
            db.rollback()
            -- item 2382
            return result_from_message(headers, message)
        end
    else
        -- item 2392
        message = "ERR_ERROR"
        -- item 2388
        db.rollback()
        -- item 2382
        return result_from_message(headers, message)
    end
end

function api_create_folder(req, session, headers)
    -- item 798
    local space_id = req:stash("first")
    -- item 800
    local data = req:json()
    -- item 791
    local ok, result, count = space.create_folder(
    	space_id,
    	data,
    	session.user_id,
    	session.admin
    )
    -- item 793
    if ok then
        -- item 801
        local rdata = {
        	user_name = session.name,
        	folder_id = result
        }
        -- item 797
        return make_json_success(headers, rdata)
    else
        -- item 1759
        if (result == "ERR_DIAGRAM_LIMIT") and (count) then
            -- item 1878
            local suggested = suggest_product(
            	session,
            	count,
            	get_product_diagram_limit
            )
            -- item 1763
            local error_data = {
            	error = result,
            	suggested = suggested
            }
            -- item 1762
            return make_json_response(
            	400,
            	headers,
            	error_data
            )
        else
            -- item 796
            return result_from_message(headers, result)
        end
    end
end

function api_create_space(req, session, headers)
    -- item 1285
    db.begin()
    -- item 1280
    local message
    local suggested = nil
    local user_id = session.user_id
    -- item 1236
    local user = vud.get_user(user_id)
    -- item 1237
    if user then
        -- item 1240
        local limit = get_space_limit(user_id)
        local actual = calc_own(user_id)
        -- item 1277
        if actual >= limit then
            -- item 1279
            message = "ERR_SPACE_LIMIT"
            -- item 1880
            suggested = suggest_product(
            	session,
            	actual + 1,
            	get_product_space_limit
            )
            -- item 1287
            db.rollback()
            -- item 1881
            if suggested then
                -- item 1879
                local error_data = {
                	error = message,
                	suggested = suggested
                }
                -- item 1884
                return make_json_response(400, headers, error_data)
            else
                -- item 1231
                return result_from_message(headers, message)
            end
        else
            -- item 1234
            local data = req:json()
            local space_id = utf8.lower(data.name)
            space_id = utils.trim(space_id)
            -- item 1228
            if space.space_exists(space_id) then
                -- item 1283
                message = "ERR_SPACE_EXISTS"
                -- item 1287
                db.rollback()
                -- item 1881
                if suggested then
                    -- item 1879
                    local error_data = {
                    	error = message,
                    	suggested = suggested
                    }
                    -- item 1884
                    return make_json_response(400, headers, error_data)
                else
                    -- item 1231
                    return result_from_message(headers, message)
                end
            else
                -- item 1319
                if #space_id < 2 then
                    -- item 1322
                    message = "ERR_NAME_TOO_SHORT"
                    -- item 1287
                    db.rollback()
                    -- item 1881
                    if suggested then
                        -- item 1879
                        local error_data = {
                        	error = message,
                        	suggested = suggested
                        }
                        -- item 1884
                        return make_json_response(400, headers, error_data)
                    else
                        -- item 1231
                        return result_from_message(headers, message)
                    end
                else
                    -- item 1323
                    if #space_id > 70 then
                        -- item 1326
                        message = "ERR_NAME_TOO_LONG"
                        -- item 1287
                        db.rollback()
                        -- item 1881
                        if suggested then
                            -- item 1879
                            local error_data = {
                            	error = message,
                            	suggested = suggested
                            }
                            -- item 1884
                            return make_json_response(400, headers, error_data)
                        else
                            -- item 1231
                            return result_from_message(headers, message)
                        end
                    else
                        -- item 1327
                        if utils.good_id_symbols(space_id) then
                            -- item 1226
                            space.create_space(
                            	space_id,
                            	user_id
                            )
                            -- item 1933
                            space.update_space_limits(space_id)
                            -- item 1286
                            db.commit()
                            -- item 1284
                            return make_empty_response(headers)
                        else
                            -- item 1330
                            message = "ERR_NAME_INVALID"
                            -- item 1287
                            db.rollback()
                            -- item 1881
                            if suggested then
                                -- item 1879
                                local error_data = {
                                	error = message,
                                	suggested = suggested
                                }
                                -- item 1884
                                return make_json_response(400, headers, error_data)
                            else
                                -- item 1231
                                return result_from_message(headers, message)
                            end
                        end
                    end
                end
            end
        end
    else
        -- item 1239
        message = "ERR_USER_NOT_FOUND"
        -- item 1287
        db.rollback()
        -- item 1881
        if suggested then
            -- item 1879
            local error_data = {
            	error = message,
            	suggested = suggested
            }
            -- item 1884
            return make_json_response(400, headers, error_data)
        else
            -- item 1231
            return result_from_message(headers, message)
        end
    end
end

function api_create_user(req, session, headers)
    -- item 928
    local msg, ok, result
    -- item 658
    local data = req:json()
    -- item 659
    if (((data.name) and (data.password)) and (data.email)) and (data.lump) then
        -- item 3193
        if user_exists(data.name) then
            -- item 3195
            msg = "ERR_USER_ID_NOT_UNIQUE"
            -- item 669
            return make_json_error(
            	400,
            	headers,
            	msg
            )
        else
            -- item 3196
            if user_exists(data.email) then
                -- item 3198
                msg = "ERR_USER_EMAIL_NOT_UNIQUE"
                -- item 669
                return make_json_error(
                	400,
                	headers,
                	msg
                )
            else
                -- item 672
                if send_capture(session, data.lump) then
                    -- item 4332
                    ok, result, new_session = create_user_core(
                    	req,
                    	session,
                    	headers,
                    	data,
                    	data.password
                    )
                    -- item 667
                    if ok then
                        -- item 4991
                        set_session_cookie(
                        	headers,
                        	new_session
                        )
                        -- item 4337
                        return make_json_success(headers, result)
                    else
                        -- item 4338
                        msg = result
                        -- item 669
                        return make_json_error(
                        	400,
                        	headers,
                        	msg
                        )
                    end
                else
                    -- item 3180
                    msg = "ERR_BAD_REQUEST"
                    -- item 669
                    return make_json_error(
                    	400,
                    	headers,
                    	msg
                    )
                end
            end
        end
    else
        -- item 663
        msg = "ERR_BAD_REQUEST"
        -- item 669
        return make_json_error(
        	400,
        	headers,
        	msg
        )
    end
end

function api_create_user_email(req, session, headers)
    -- item 4272
    local msg, ok, result
    -- item 4293
    local ip = get_client_ip(req)
    -- item 4256
    local data = req:json()
    -- item 4257
    if (data.name) and (data.email) then
        -- item 4287
        if user_exists(data.name) then
            -- item 4289
            msg = "ERR_USER_ID_NOT_UNIQUE"
            -- item 4266
            return make_json_error(
            	400,
            	headers,
            	msg
            )
        else
            -- item 4290
            if user_exists(data.email) then
                -- item 4292
                msg = "ERR_USER_EMAIL_NOT_UNIQUE"
                -- item 4266
                return make_json_error(
                	400,
                	headers,
                	msg
                )
            else
                -- item 4294
                local password = utils.random_password(8)
                -- item 4335
                ok, result, new_session = create_user_core(
                	req,
                	session,
                	headers,
                	data,
                	password
                )
                -- item 4334
                if ok then
                    -- item 4992
                    set_session_cookie(
                    	headers,
                    	new_session
                    )
                    -- item 4339
                    send_welcome_email_later(
                    	result.id,
                    	result.language,
                    	password
                    )
                    -- item 4281
                    return make_json_success(headers, result)
                else
                    -- item 4336
                    msg = result
                    -- item 4266
                    return make_json_error(
                    	400,
                    	headers,
                    	msg
                    )
                end
            end
        end
    else
        -- item 4260
        msg = "ERR_BAD_REQUEST"
        -- item 4266
        return make_json_error(
        	400,
        	headers,
        	msg
        )
    end
end

function api_def_query(req, session, headers)
    -- item 3212
    local data = req:json()
    -- item 3204
    local ok, result = space.def_query(
    	data,
    	session.user_id,
    	session.admin
    )
    -- item 3206
    if ok then
        -- item 3210
        return make_json_success(headers, result)
    else
        -- item 3209
        return result_from_message(headers, result)
    end
end

function api_delete_diatest(req, session, headers)
    -- item 1074
    if global_cfg.diatest then
        -- item 1060
        local id = req:stash("first")
        -- item 1076
        local path = make_fixture_name(id)
        -- item 1077
        os.remove(path)
        -- item 1059
        return make_empty_response(headers)
    else
        -- item 1075
        return result_from_message(headers, "ERR_NOT_FOUND")
    end
end

function api_delete_search(req, session, headers)
    -- item 4223
    space.search_delete(
    	session.session_id
    )
    -- item 4214
    return make_empty_response(headers)
end

function api_delete_space(req, session, headers)
    -- item 1736
    local space_id = req:stash("first")
    -- item 1730
    db.begin()
    -- item 1725
    local message
    -- item 1717
    local user = vud.get_user(session.user_id)
    -- item 1718
    if user then
        -- item 1734
        local ok, access = space.read_access(
        	space_id,
        	session.user_id,
        	session.admin
        )
        -- item 1737
        if ok then
            -- item 1755
            message = space.delete_space(
            	space_id,
            	session.user_id,
            	session.admin
            )
            -- item 1756
            if message then
                -- item 1732
                db.rollback()
                -- item 1715
                return result_from_message(headers, message)
            else
                -- item 1731
                db.commit()
                -- item 1758
                ej.info(
                	"delete_space",
                	{user_id=session.user_id,
                	space_id=space_id,
                	session_id=session.session_id}
                )
                -- item 1729
                return make_empty_response(headers)
            end
        else
            -- item 1740
            message = access
            -- item 1732
            db.rollback()
            -- item 1715
            return result_from_message(headers, message)
        end
    else
        -- item 1720
        message = "ERR_USER_NOT_FOUND"
        -- item 1732
        db.rollback()
        -- item 1715
        return result_from_message(headers, message)
    end
end

function api_delete_user(req, session, headers)
    -- item 2623
    delete_user(
    	session.user_id
    )
    -- item 2587
    return make_empty_response(headers)
end

function api_download(req, session, headers)
    -- item 1385
    local filename = req:stash("first")
    -- item 1402
    local data = req:read()
    -- item 1437
    data = decode_data_url(data)
    -- item 1547
    local down_info = {
    	type = "simple",
    	image = data
    }
    -- item 1405
    local result = put_download(
    	session,
    	down_info,
    	filename
    )
    -- item 1435
    return make_json_success(headers, result)
end

function api_download_svg(req, session, headers)
    -- item 1536
    local data = req:json()
    -- item 1550
    local down_info = {
    	type = "svg",
    	image = data.image,
    	fonts = data.fonts
    }
    -- item 1548
    local result = put_download(
    	session,
    	down_info,
    	data.filename
    )
    -- item 1549
    return make_json_success(headers, result)
end

function api_edit(req, session, headers)
    -- item 770
    local space_id = req:stash("first")
    local folder_id = req:stash("second")
    -- item 772
    local data = req:json()
    -- item 763
    local msg = space.edit(
    	space_id,
    	folder_id,
    	data,
    	session.user_id,
    	session.admin
    )
    -- item 765
    if msg then
        -- item 768
        return result_from_message(headers, msg)
    else
        -- item 773
        return make_empty_response(headers)
    end
end

function api_feedback(req, session, headers)
    -- item 992
    local user
    local type = ""
    -- item 996
    if session.user_id == "" then
        -- item 1000
        user = "nouser"
    else
        -- item 999
        user = session.user_id
    end
    -- item 1452
    local data = req:json()
    -- item 1479
    data.user = user
    -- item 1453
    if data.type then
        -- item 1456
        type = data.type
    end
    -- item 1001
    local d = clock.time()
    local date = os.date("%Y%m%d-%H%M%S", d)
    local filename = type .. date .. "-" .. user .. ".json"
    local path = global_cfg.feedback_dir .. "/" ..filename
    -- item 1472
    if session.user_id == "" then
        
    else
        -- item 1457
        add_diagram(data)
    end
    -- item 4096
    data.user_agent = req:header("user-agent")
    -- item 1480
    save_report(path, data, session.email)
    -- item 994
    return make_empty_response(headers)
end

function api_find_users(req, session, headers)
    -- item 1214
    local data = req:json()
    -- item 1217
    if data then
        -- item 1213
        local result = vud.find_users(
        	data
        )
        -- item 1221
        return make_json_success(headers, result)
    else
        -- item 1220
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_gen_coupons(req, session, headers)
    -- item 2162
    local data = req:json()
    -- item 2164
    local tag = data.tag
    local count = data.count
    local product_id = data.product_id
    local max_users = data.max_users
    -- item 2169
    if (((tag) and (product_id)) and (count)) and (max_users) then
        -- item 2155
        local coupons = lic.create_coupons(
        	count,
        	product_id,
        	max_users,
        	tag,
        	session.user_id
        )
        -- item 2174
        local data = {
        	coupons = coupons
        }
        -- item 2173
        return make_json_success(headers, data)
    else
        -- item 2168
        return result_from_message(headers, "ERR_BAD_OP")
    end
end

function api_get_access(req, session, headers)
    -- item 1262
    local space_id = req:stash("first")
    -- item 1255
    local ok, result = space.read_access(
    	space_id,
    	session.user_id,
    	session.admin
    )
    -- item 1257
    if ok then
        -- item 1292
        result.readers = to_user_names(result.readers)
        result.writers = to_user_names(result.writers)
        result.admins = to_user_names(result.admins)
        -- item 1261
        return make_json_success(headers, result)
    else
        -- item 1260
        return result_from_message(headers, result)
    end
end

function api_get_adm(req, session, headers)
    -- item 945
    local op = req:stash("first")
    -- item 949
    if op == "stats" then
        -- item 947
        local rdata = db.stats_get()
        -- item 944
        return make_json_success(headers, rdata)
    else
        -- item 943
        return result_from_message(headers, "ERR_BAD_REQUEST")
    end
end

function api_get_diatest(req, session, headers)
    -- item 1027
    if global_cfg.diatest then
        -- item 1061
        local paths = fio.glob(
        	global_cfg.diatest .. "/*.txt"
        )
        -- item 1071
        local fixtures = {}
        for _, path in ipairs(paths) do
            -- item 1064
            local content = utils.read_all_bytes(path)
            -- item 1065
            if content then
                -- item 1069
                local base = fio.basename(path, ".txt")
                -- item 1068
                local data = json.decode(content)
                -- item 1070
                data.id = base
                -- item 1072
                table.insert(
                	fixtures,
                	data
                )
            end
        end
        -- item 1073
        local result = {
        	fixtures = fixtures
        }
        -- item 1047
        return make_json_success(headers, result)
    else
        -- item 1030
        return result_from_message(headers, "ERR_NOT_FOUND")
    end
end

function api_get_download(req, session, headers)
    local _sw15520000_ = 0
    -- item 1397
    local download_id = req:stash("first")
    -- item 1428
    local record = take_download(download_id)
    -- item 1429
    if (record) and (record.session_id == session.session_id) then
        -- item 15520000
        _sw15520000_ = record.data.type
        -- item 15520001
        if _sw15520000_ == "simple" then
            -- item 1395
            local body = record.data.image
            local status = 200
            local filename = record.filename
            -- item 1434
            set_content_type(headers, filename)
            -- item 1401
            headers["content-disposition"] =
              "attachment; filename=" .. filename
            -- item 1398
            local resp = {
            	status = status,
            	body = body,
            	headers = headers
            }
            -- item 1399
            return resp
        else
            -- item 15520002
            if _sw15520000_ == "svg" then
                
            else
                -- item 15520003
                error(_sw15520000_)
            end
            -- item 1559
            return download_svg(
            	req,
            	headers,
            	record
            )
        end
    else
        -- item 1433
        return result_from_message(headers, "ERR_NOT_FOUND")
    end
end

function api_get_folder(req, session, headers)
    -- item 728
    local space_id = req:stash("first")
    local folder_id = req:stash("second")
    -- item 716
    local ok, result = space.get_folder(
    	space_id,
    	folder_id,
    	false,
    	session.user_id,
    	session.admin
    )
    -- item 718
    if ok then
        -- item 802
        result.user_name = session.name
        -- item 722
        return make_json_success(headers, result)
    else
        -- item 721
        return result_from_message(headers, result)
    end
end

function api_get_for_free(req, session, headers)
    -- item 2786
    local language = choose_language(
    	req,
    	session,
    	""
    )
    -- item 2264
    local message
    -- item 2261
    db.begin()
    -- item 2258
    local data = req:json()
    -- item 2294
    local transaction = get_uncompleted_trans(
    	session.user_id,
    	data.trans_id
    )
    -- item 2265
    if transaction then
        -- item 2327
        local tdata = transaction.details
        -- item 2260
        local coupon = lic.get_coupon(tdata.coupon)
        -- item 2268
        if coupon then
            -- item 2269
            redeem_coupon(
            	session.user_id,
            	tdata.coupon
            )
            -- item 2302
            complete_transaction(
            	session.user_id,
            	data.trans_id,
            	"success"
            )
            -- item 3505
            local agreement_id = nil
            -- item 3506
            create_license(
            	session.user_id,
            	tdata.product_id,
            	tdata.max_diagrams,
            	tdata.max_spaces,
            	tdata.users,
            	tdata.expiry,
            	data.trans_id,
            	agreement_id,
            	"coupon"
            )
            -- item 2262
            db.commit()
            -- item 2783
            local make_receipt = function()
              return build_receipt(
                  data.trans_id,
                  tdata,
                  language
              )
            end
            -- item 2784
            local response = db.invoke_no_throw(
            	make_receipt,
            	"build receipt"
            ) or {}
            -- item 2785
            response.type = "coupon"
            response.trans_id = data.trans_id
            -- item 2742
            return make_json_success(headers, response)
        else
            -- item 2263
            db.rollback()
            -- item 2267
            message = "ERR_TRANS_NOT_FOUND"
            -- item 2257
            return result_from_message(headers, message)
        end
    else
        -- item 2263
        db.rollback()
        -- item 2267
        message = "ERR_TRANS_NOT_FOUND"
        -- item 2257
        return result_from_message(headers, message)
    end
end

function api_get_license(req, session, headers)
    -- item 2132
    local user = vud.get_user(session.user_id)
    -- item 2134
    if user then
        -- item 2138
        local license = lic.get_raw_license(
        	user.license
        )
        -- item 2140
        if license then
            -- item 2143
            local language = get_user_language(
            	session.user_id
            )
            -- item 2147
            local now = os.time()
            local left = license.expiry - now
            local left_years = left / 3600 / 24 / 365
            -- item 2144
            if left_years >= 5 then
                -- item 2148
                license.expiry_str = "MES_NEVER"
            else
                -- item 2149
                license.expiry_str = localize_time(
                	language,
                	license.expiry
                )
            end
            -- item 2150
            local product = utils.get_product(
            	license.product_id
            )
            license.product_name = product.name
            license.renew = lic.should_show_banner(
            	license.expiry
            )
            -- item 3932
            if license.agreement_id then
                -- item 3935
                local agreement = db.agreement_get(license.agreement_id)
                -- item 4019
                if is_agreement_active(agreement) then
                    -- item 3937
                    license.currency = agreement.currency
                    license.total = agreement.total
                    -- item 3938
                    license.due = localize_time(
                    	language,
                    	agreement.due
                    )
                else
                    -- item 4020
                    license.total = 0
                end
            else
                -- item 4020
                license.total = 0
            end
            -- item 2139
            return make_json_success(headers, license)
        else
            -- item 2142
            return make_json_error(
            	400,
            	headers,
            	"ERR_NO_LICENSE"
            )
        end
    else
        -- item 2137
        return make_json_error(
        	400,
        	headers,
        	"ERR_USER_NOT_FOUND"
        )
    end
end

function api_get_own_spaces(req, session, headers)
    -- item 2671
    local user = vud.get_user(session.user_id)
    -- item 2673
    if user then
        -- item 2679
        local spaces = get_only_own_spaces(
        	session.user_id
        )
        -- item 2677
        local data = {
        	spaces = spaces
        }
        -- item 2678
        return make_json_success(headers, data)
    else
        -- item 2676
        return make_json_error(400, headers, "ERR_USER_NOT_FOUND")
    end
end

function api_get_search(req, session, headers)
    -- item 4164
    local resp = space.search_items_get(
    	session.session_id
    )
    -- item 4224
    if resp then
        -- item 4163
        return make_json_response(200, headers, resp)
    else
        -- item 4227
        return result_from_message(headers, "ERR_NOT_FOUND")
    end
end

function api_get_summary(req, session, headers)
    -- item 1677
    local summaries = ej.get_summaries()
    -- item 1666
    local rdata = {
    	summaries = summaries,
    	status = get_tarantool_status()
    }
    -- item 1664
    return make_json_success(headers, rdata)
end

function api_get_tag(req, session, headers)
    -- item 785
    local space_id = req:stash("first")
    local folder_id = req:stash("second")
    local time = req:stash("third")
    -- item 778
    local ok, result = space.get_tag(
    	space_id,
    	folder_id
    )
    -- item 780
    if ok then
        -- item 786
        local data = {
        	user_name = session.name,
        	tag = result,
        	time = time
        }
        -- item 784
        return make_json_success(headers, data)
    else
        -- item 783
        return result_from_message(headers, result)
    end
end

function api_get_theme(req, session, headers)
    -- item 677
    local ok, result = space.get_theme(session.user_id)
    -- item 686
    if ok then
        -- item 692
        local user = vud.get_user(session.user_id)
        -- item 693
        if user then
            -- item 691
            result.id = session.user_id
            result.name = user.name
            -- item 690
            return make_json_success(headers, result)
        else
            -- item 695
            return make_json_error(400, headers, "ERR_USER_NOT_FOUND")
        end
    else
        -- item 689
        return make_json_error(400, headers, result)
    end
end

function api_get_transactions(req, session, headers)
    -- item 2415
    local transactions = lic.get_user_transactions(
    	session.user_id
    )
    -- item 4023
    local user_payments = db.payment_get_by_user(
    	session.user_id
    )
    for _, tran in ipairs(user_payments) do
        -- item 4029
        local payment = tran[3]
        payment.type = "payment"
        -- item 4030
        payment.details.currency
         = payment.currency
        payment.details.total
         = payment.total
        -- item 4026
        table.insert(
        	transactions,
        	payment
        )
    end
    -- item 4027
    local by_when_created = function(left, right)
    	return left.when_created < right.when_created
    end
    -- item 4028
    table.sort(
    	transactions,
    	by_when_created
    )
    -- item 2418
    local data = {
    	transactions = transactions
    }
    -- item 2417
    return make_json_success(headers, data)
end

function api_get_trash(req, session, headers)
    -- item 856
    local space_id = req:stash("first")
    -- item 858
    if space_id then
        -- item 868
        local ok, result = space.get_trash(
        	space_id,
        	session.user_id,
        	session.admin
        )
        -- item 869
        if ok then
            -- item 855
            result.space_id = space_id
            return make_json_success(headers, result)
        else
            -- item 873
            return result_from_message(headers, result)
        end
    else
        -- item 854
        return result_from_message(headers, "ERR_BAD_REQUEST")
    end
end

function api_handler(req)
    -- item 33
    local ok, result = xpcall(
    	function()
    		return api_handler_kernel(req)
    	end,
    	on_error
    )
    -- item 119
    if ok then
        -- item 122
        return result
    else
        -- item 4880
        db.clean_up()
        -- item 124
        return {
        	status = 500,
        	body = '{"error": "ERR_SERVER"}'
        }
    end
end

function api_handler_kernel(req)
    -- item 753
    local api_method = req:stash("method")
    local method = req:method()
    -- item 755
    local headers = {}
    -- item 756
    expires_now(headers)
    -- item 757
    local session = handle_cookie(req, headers)
    -- item 758
    local handler = find_api_handler(
    	api_method,
    	method,
    	session
    )
    -- item 754
    local resp = handler(req, session, headers)
    -- item 752
    return resp
end

function api_logon(req, session, headers)
    -- item 612
    local data = req:json()
    -- item 617
    if ((data) and (data.user)) and (data.password) then
        -- item 610
        local ok, msg, user_id, email, new_session = vud.logon(
        	session.session_id,
        	data.user,
        	data.password
        )
        -- item 618
        if ok then
            -- item 4990
            set_session_cookie(
            	headers,
            	new_session
            )
            -- item 2194
            local data = {
            	id = user_id,
            	name = msg,
            	email = email
            }
            -- item 2193
            return make_json_success(headers, data)
        else
            -- item 621
            return make_json_error(
            	401,
            	headers,
            	msg
            )
        end
    else
        -- item 620
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_logout(req, session, headers)
    -- item 603
    vud.logout(session.session_id)
    -- item 602
    return make_empty_response(headers)
end

function api_many(req, session, headers)
    local _sw8300000_ = 0
    -- item 828
    local data = req:json()
    -- item 839
    local message = nil
    -- item 8300000
    _sw8300000_ = data.operation
    -- item 8300001
    if _sw8300000_ == "delete" then
        -- item 821
        message = space.delete_many(
        	data.items,
        	session.user_id,
        	session.admin
        )
        -- item 823
        if message then
            -- item 826
            return result_from_message(headers, message)
        else
            -- item 829
            return make_empty_response(headers)
        end
    else
        -- item 8300002
        if _sw8300000_ == "copy" then
            -- item 840
            message = space.copy_many(
            	data.items,
            	data.target.space_id,
            	data.target.folder_id,
            	session.user_id,
            	session.admin
            )
            -- item 823
            if message then
                -- item 826
                return result_from_message(headers, message)
            else
                -- item 829
                return make_empty_response(headers)
            end
        else
            -- item 8300003
            if _sw8300000_ == "move" then
                -- item 844
                local ok, result = space.move_many(
                	data.items,
                	data.target.space_id,
                	data.target.folder_id,
                	session.user_id,
                	session.admin
                )
                -- item 958
                if ok then
                    -- item 963
                    return make_json_success(headers, result)
                else
                    -- item 961
                    message = result
                    -- item 962
                    return result_from_message(headers, message)
                end
            else
                -- item 842
                message = "ERR_BAD_OP"
                -- item 962
                return result_from_message(headers, message)
            end
        end
    end
end

function api_multi_access(req, session, headers)
    -- item 1317
    local data = req:json()
    -- item 1311
    local msg, count = space.multi_access(
    	data,
    	session.user_id,
    	session.admin
    )
    -- item 1313
    if msg then
        -- item 1765
        if (msg == "ERR_USER_LIMIT") and (count) then
            -- item 1770
            local suggested = suggest_product(
            	session,
            	count,
            	get_product_user_limit
            )
            -- item 1890
            suggested = suggested or "team_more"
            -- item 1769
            local error_data = {
            	error = msg,
            	suggested = suggested
            }
            -- item 1768
            return make_json_response(400, headers, error_data)
        else
            -- item 1316
            return result_from_message(headers, msg)
        end
    else
        -- item 1318
        return make_empty_response(headers)
    end
end

function api_pass(req, session, headers)
    -- item 644
    local data = req:json()
    -- item 647
    if data then
        -- item 643
        local msg = vud.change_password(
        	session.user_id,
        	data.old_password,
        	data.new_password
        )
        -- item 648
        if msg then
            -- item 651
            return make_json_error(
            	400,
            	headers,
            	msg
            )
        else
            -- item 642
            return make_empty_response(headers)
        end
    else
        -- item 650
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_payex_callback(req, session, headers)
    -- item 3629
    local text = req:read()
    -- item 3636
    local ip = get_client_ip(req)
    -- item 3633
    if (ip == external_creds.payex_callback_ip) or (ip == "127.0.0.1") then
        -- item 3630
        ej.info("payex_callback", {text = text})
        -- item 3638
        db.run_in_fiber(function()
        		px2_callback(text)
        	end,
        	"payex_callback"
        )
    else
        -- item 3637
        ej.info("unauthorized_payex_callback", {text = text, ip=ip})
    end
    -- item 3631
    local resp = {
    	status = 200,
    	body = "OK",
    	headers = headers
    }
    -- item 3632
    return resp
end

function api_post_adm(req, session, headers)
    -- item 1365
    local op = req:stash("first")
    -- item 1369
    if op == "reset" then
        -- item 1366
        local data = req:json()
        -- item 1368
        local user = data.user
        local password = data.password
        -- item 1359
        local msg = vud.set_password(
        	session.user_id,
        	user,
        	password
        )
        -- item 1361
        if msg then
            -- item 1364
            return result_from_message(headers, msg)
        else
            -- item 1367
            return make_empty_response(headers)
        end
    else
        -- item 1372
        return result_from_message(headers, "ERR_BAD_OP")
    end
end

function api_px2_complete(req, session, headers)
    -- item 3437
    local data = req:json()
    local order_ref = data.order_ref
    local user_id = session.user_id
    -- item 3558
    local message = nil
    local receipt = {}
    -- item 3341
    local agr_ok, agreement_id, agreement
     = find_agreement_by_order_ref(order_ref, user_id)
    -- item 3343
    if (agr_ok) and (agreement.user_id == user_id) then
        -- item 3386
        local user = vud.get_user(user_id)
        -- item 3387
        if user then
            -- item 3390
            local language = get_user_language(
            	user_id
            )
            -- item 3559
            if agreement.state == "active" then
                -- item 3707
                ej.info(
                  "skipping_complete",
                  {
                    user_id = user_id,
                    reason = "callback called before, agreement active",
                    agreement_id = agreement_id,
                    order_ref = order_ref
                  }
                )
                -- item 3562
                receipt = build_receipt(
                      agreement_id,
                      agreement,
                      language
                )
                -- item 3383
                receipt.type = "card"
                -- item 3620
                return make_json_success(headers, receipt)
            else
                -- item 3355
                local ok, result = payex.complete(
                	agreement_id,
                	order_ref,
                	user_id
                )
                -- item 3356
                if ok then
                    -- item 3557
                    receipt = on_px2_complete(
                    	user_id,
                    	agreement_id,
                    	agreement,
                    	result,
                    	language
                    )
                    -- item 3383
                    receipt.type = "card"
                    -- item 3620
                    return make_json_success(headers, receipt)
                else
                    -- item 3451
                    message = "ERR_COMPLETE_PAYMENT"
                    -- item 3621
                    return result_from_message(headers, message)
                end
            end
        else
            -- item 3389
            message = "ERR_USER_NOT_FOUND"
            -- item 3621
            return result_from_message(headers, message)
        end
    else
        -- item 3345
        message = "ERR_TRANS_NOT_FOUND"
        -- item 3621
        return result_from_message(headers, message)
    end
end

function api_px2_start(req, session, headers)
    -- item 3229
    local message
    -- item 3228
    local data = req:json()
    -- item 3230
    if (data.users) and (data.product_id) then
        -- item 3235
        local ok, pay_details = px2_calculate_payment(
        	data.product_id,
        	data.users,
        	session.user_id
        )
        -- item 3237
        if ok then
            -- item 4090
            local user = db.user_get(
            	session.user_id)[3]
            -- item 4093
            local language = get_user_language(
            	session.user_id
            )
            -- item 4089
            pay_details.trace = {}
            pay_details.trace.buy = data.ref
            pay_details.trace.reg = user.reg
            pay_details.trace.path = user.path
            pay_details.trace.ref = user.ref
            pay_details.trace.ip = user.ip
            pay_details.language = language
            -- item 3286
            local agreement_id = create_agreement(
            	pay_details
            )
            -- item 3250
            local ok2, ca_details = payex.create_agreement(
            	pay_details,
            	agreement_id,
            	session.user_id
            )
            -- item 3252
            if ok2 then
                -- item 3256
                update_agreement(
                  agreement_id,
                  {
                    agreement_ref = ca_details.agreement_ref
                  }	
                )
                -- item 3265
                local ip = get_client_ip(req)
                -- item 3267
                local payment = {
                  agreement_id = agreement_id,
                  total = pay_details.total,
                  currency = pay_details.currency,
                  product_code = pay_details.product_code,
                  product_pay_name = pay_details.product_pay_name,
                  ip = ip,
                  language = "en-US",
                  user_id = session.user_id,
                  agreement_ref = ca_details.agreement_ref
                }
                -- item 3268
                local ok3, cr_result = payex.initialize(
                	payment,
                	session.user_id
                )
                -- item 3269
                if ok3 then
                    -- item 3271
                    db.agreement_update_order(
                    	agreement_id,
                    	cr_result.order_ref
                    )
                    -- item 3276
                    local details = {
                    	redirect = cr_result.redirect,
                    	agreement_id = agreement_id
                    }
                    -- item 3275
                    return make_json_success(headers, details)
                else
                    -- item 3280
                    message = "ERR_ERROR"
                    -- item 3285
                    return result_from_message(headers, message)
                end
            else
                -- item 3280
                message = "ERR_ERROR"
                -- item 3285
                return result_from_message(headers, message)
            end
        else
            -- item 3280
            message = "ERR_ERROR"
            -- item 3285
            return result_from_message(headers, message)
        end
    else
        -- item 3280
        message = "ERR_ERROR"
        -- item 3285
        return result_from_message(headers, message)
    end
end

function api_recent(req, session, headers)
    -- item 981
    local ok, result = space.get_recent(
    	session.user_id
    )
    -- item 983
    if ok then
        -- item 987
        return make_json_success(headers, result)
    else
        -- item 986
        return result_from_message(headers, result)
    end
end

function api_reset_pass(req, session, headers)
    -- item 1506
    local data = req:json()
    -- item 1509
    if data then
        -- item 1524
        local language = choose_language(
        	req,
        	session,
        	""
        )
        -- item 1505
        local ok, data = vud.reset_password(
        	data.user_email,
        	session.session_id,
        	language
        )
        -- item 1510
        if ok then
            -- item 1648
            return make_json_success(headers, data)
        else
            -- item 1513
            return make_json_error(
            	400,
            	headers,
            	data
            )
        end
    else
        -- item 1512
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_restore(req, session, headers)
    -- item 884
    local space_id = req:stash("first")
    local folder_id = req:stash("second")
    -- item 878
    local msg = space.restore(
    	space_id,
    	folder_id,
    	session.user_id,
    	session.admin
    )
    -- item 880
    if msg then
        -- item 883
        return result_from_message(headers, msg)
    else
        -- item 886
        return make_empty_response(headers)
    end
end

function api_save_diatest(req, session, headers)
    -- item 1082
    if global_cfg.diatest then
        -- item 1086
        local data = req:json()
        -- item 1087
        if is_null(data.oldId) then
            
        else
            -- item 1111
            local epath = make_fixture_name(data.oldId)
            -- item 1103
            os.remove(epath)
        end
        -- item 1112
        local content = json.encode(data.fixture)
        -- item 1084
        local path = make_fixture_name(data.id)
        -- item 1085
        utils.write_all_bytes(path, content)
        -- item 1080
        return make_empty_response(headers)
    else
        -- item 1083
        return result_from_message(headers, "ERR_NOT_FOUND")
    end
end

function api_save_try(req, session, headers)
    -- item 1016
    local data = req:json()
    -- item 1009
    local ok, result, count = space.save_try(
    	data,
    	session.user_id
    )
    -- item 1011
    if ok then
        -- item 1018
        local response = {
        	diagram_id = result
        }
        -- item 1019
        return make_json_success(headers, response)
    else
        -- item 3173
        if (result == "ERR_DIAGRAM_LIMIT") and (count) then
            -- item 3176
            local suggested = suggest_product(
            	session,
            	count,
            	get_product_diagram_limit
            )
            -- item 3175
            local error_data = {
            	error = result,
            	suggested = suggested
            }
            -- item 3174
            return make_json_response(
            	400,
            	headers,
            	error_data
            )
        else
            -- item 1014
            return result_from_message(headers, result)
        end
    end
end

function api_set_ref(req, session, headers)
    -- item 4083
    local data = req:json()
    -- item 4082
    vud.set_session_ref(
    	session.session_id,
    	data.ref
    )
    -- item 4081
    return make_empty_response(headers)
end

function api_set_theme(req, session, headers)
    -- item 696
    local data = req:json()
    -- item 701
    if data then
        -- item 705
        local user = vud.get_user(session.user_id)
        -- item 706
        if user then
            -- item 709
            space.set_theme(session.user_id, data)
            -- item 697
            return make_empty_response(headers)
        else
            -- item 708
            return make_json_error(400, headers, "ERR_USER_NOT_FOUND")
        end
    else
        -- item 704
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_start_search(req, session, headers)
    local _sw41710000_ = 0
    -- item 4167
    local msg, ok, result
    -- item 4155
    local data = req:json()
    -- item 4178
    if (data.spaces) and (data.needle) then
        -- item 4179
        local space_id = data.spaces[1]
        -- item 4188
        if space_id then
            -- item 41710000
            _sw41710000_ = data.type
            -- item 41710001
            if _sw41710000_ == "folders" then
                -- item 4181
                ok, result = space.find_folders(
                	space_id,
                	data.needle,
                	session.user_id,
                	session.admin
                )
                -- item 4184
                if ok then
                    -- item 4182
                    return make_json_success(headers, result)
                else
                    -- item 4187
                    msg = result
                    -- item 4165
                    return make_json_error(
                    	400,
                    	headers,
                    	msg
                    )
                end
            else
                -- item 41710002
                if _sw41710000_ == "items" then
                    -- item 4192
                    ok, result = space.search_items_start(
                    	session.session_id,
                    	space_id,
                    	data.needle,
                    	session.user_id,
                    	session.admin
                    )
                    -- item 4184
                    if ok then
                        -- item 4182
                        return make_json_success(headers, result)
                    else
                        -- item 4187
                        msg = result
                        -- item 4165
                        return make_json_error(
                        	400,
                        	headers,
                        	msg
                        )
                    end
                else
                    -- item 4166
                    msg = "ERR_BAD_REQUEST"
                    -- item 4165
                    return make_json_error(
                    	400,
                    	headers,
                    	msg
                    )
                end
            end
        else
            -- item 4166
            msg = "ERR_BAD_REQUEST"
            -- item 4165
            return make_json_error(
            	400,
            	headers,
            	msg
            )
        end
    else
        -- item 4166
        msg = "ERR_BAD_REQUEST"
        -- item 4165
        return make_json_error(
        	400,
        	headers,
        	msg
        )
    end
end

function api_stop_subscription(req, session, headers)
    -- item 3950
    db.begin()
    -- item 3951
    local message
    -- item 3961
    local user_id = session.user_id
    local user = vud.get_user(user_id)
    -- item 3962
    if user then
        -- item 4014
        local license_id = user.license
        -- item 3965
        local license = lic.get_raw_license(
        	license_id
        )
        -- item 3966
        if (license) and (license.active) then
            -- item 4013
            local agreement_id = license.agreement_id
            -- item 3970
            if agreement_id then
                -- item 3971
                local agreement = db.agreement_get(
                	agreement_id
                )
                -- item 3990
                if is_agreement_active(agreement) then
                    -- item 4002
                    update_agreement(
                      agreement_id,
                      {
                        state = "cancelled"
                      }	
                    )
                    -- item 4003
                    lic.update_license(
                    	license_id,
                    	{active = false}
                    )
                    -- item 4004
                    update_users_spaces(user_id)
                    -- item 4001
                    db.commit()
                    -- item 4018
                    local payex_action = function()
                      payex.delete_agreement(
                        agreement.agreement_ref,
                        user_id,
                        agreement_id
                      )
                    end
                    -- item 4015
                    db.run_in_fiber(
                    	payex_action,
                    	"delete agreement on stop"
                    )
                    -- item 4016
                    ej.info(
                    	"stop_subscription",
                    	{
                    		user_id = user_id,
                    		agreement_id = agreement_id,
                    		license_id = license_id,
                    		agreement_ref = agreement.agreement_ref
                    	}
                    )
                    -- item 4000
                    return make_empty_response(headers)
                else
                    -- item 3964
                    message = "ERR_NO_LICENSE"
                    -- item 4006
                    db.rollback()
                    -- item 3948
                    return result_from_message(headers, message)
                end
            else
                -- item 3964
                message = "ERR_NO_LICENSE"
                -- item 4006
                db.rollback()
                -- item 3948
                return result_from_message(headers, message)
            end
        else
            -- item 3964
            message = "ERR_NO_LICENSE"
            -- item 4006
            db.rollback()
            -- item 3948
            return result_from_message(headers, message)
        end
    else
        -- item 3963
        message = "ERR_USER_NOT_FOUND"
        -- item 4006
        db.rollback()
        -- item 3948
        return result_from_message(headers, message)
    end
end

function api_tree(req, session, headers)
    -- item 910
    local space_id = req:stash("first")
    -- item 903
    local ok, result = space.get_tree(
    	space_id,
    	session.user_id,
    	session.admin
    )
    -- item 905
    if ok then
        -- item 911
        result.user_name = session.name
        -- item 909
        return make_json_success(headers, result)
    else
        -- item 908
        return result_from_message(headers, result)
    end
end

function api_trial(req, session, headers)
    -- item 4651
    local message = nil
    -- item 4652
    local data = req:json()
    -- item 4653
    db.begin()
    -- item 4655
    local user_id = session.user_id
    local user = vud.get_user(user_id)
    local product_id = data.product
    -- item 4656
    if user then
        -- item 4659
        if user.had_trial then
            -- item 4658
            message = "ERR_HAD_TRIAL"
            -- item 4685
            db.rollback()
            -- item 4684
            return result_from_message(headers, message)
        else
            -- item 4693
            if utils.is_empty(product_id) then
                -- item 4692
                message = "ERR_PRODUCT_MISSING"
                -- item 4685
                db.rollback()
                -- item 4684
                return result_from_message(headers, message)
            else
                -- item 4663
                local license = lic.get_raw_license(
                	user.license
                )
                -- item 4664
                if ((license) and (license.active)) and (not (license.product_id == "basic")) then
                    -- item 4671
                    message = "ERR_TRIAL_NOT_ALLOWED"
                    -- item 4685
                    db.rollback()
                    -- item 4684
                    return result_from_message(headers, message)
                else
                    -- item 4787
                    start_trial(
                    	session.session_id,
                    	user_id,
                    	user.license,
                    	product_id
                    )
                    -- item 4687
                    db.commit()
                    -- item 4691
                    return make_empty_response(headers)
                end
            end
        end
    else
        -- item 4657
        message = "ERR_USER_NOT_FOUND"
        -- item 4685
        db.rollback()
        -- item 4684
        return result_from_message(headers, message)
    end
end

function api_unsubscribe(req, session, headers)
    -- item 1685
    local data = req:json()
    -- item 1688
    if data then
        -- item 1684
        local msg = vud.unsubscribe(data)
        -- item 1689
        if msg then
            -- item 1692
            return make_json_error(
            	400,
            	headers,
            	msg
            )
        else
            -- item 1683
            return make_empty_response(headers)
        end
    else
        -- item 1691
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_update_folder(req, session, headers)
    -- item 814
    local space_id = req:stash("first")
    local folder_id = req:stash("second")
    -- item 815
    local data = req:json()
    -- item 808
    local msg = space.update_folder(
    	space_id,
    	folder_id,
    	data,
    	session.user_id,
    	session.admin
    )
    -- item 810
    if msg then
        -- item 813
        return result_from_message(headers, msg)
    else
        -- item 816
        return make_empty_response(headers)
    end
end

function api_update_user(req, session, headers)
    -- item 629
    local data = req:json()
    -- item 632
    if data then
        -- item 628
        local msg = vud.update_user(
        	session.user_id,
        	data
        )
        -- item 633
        if msg then
            -- item 636
            return make_json_error(
            	400,
            	headers,
            	msg
            )
        else
            -- item 627
            return make_empty_response(headers)
        end
    else
        -- item 635
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_REQUEST"
        )
    end
end

function api_use_coupon(req, session, headers)
    -- item 3896
    local message = nil
    -- item 3898
    local data = req:json()
    -- item 3915
    db.begin()
    -- item 3899
    if data.coupon then
        -- item 3907
        local coupon = lic.get_coupon(data.coupon)
        -- item 3908
        if coupon then
            -- item 3909
            local ok, details = calculate_payment(
            	coupon.product_id,
            	coupon.max_users,
            	nil
            )
            -- item 3910
            if ok then
                -- item 3914
                details.coupon = data.coupon
                -- item 3918
                local trans_id = create_transaction(
                	session.user_id,
                	"coupon",
                	details
                )
                -- item 3919
                details.trans_id = trans_id
                -- item 3924
                redeem_coupon(
                	session.user_id,
                	data.coupon
                )
                -- item 3925
                complete_transaction(
                	session.user_id,
                	trans_id,
                	"success"
                )
                -- item 3926
                local agreement_id = nil
                -- item 3927
                create_license(
                	session.user_id,
                	details.product_id,
                	details.max_diagrams,
                	details.max_spaces,
                	details.users,
                	details.expiry,
                	trans_id,
                	agreement_id,
                	"coupon"
                )
                -- item 3917
                db.commit()
                -- item 3920
                ej.info(
                	"confirm_coupon",
                	{user_id=user_id, trans_id=trans_id,
                	coupon=data.coupon,
                	users=details.users,
                	product_id=details.product_id,
                	session_id=session.session_id}
                )
                -- item 3931
                local language = get_user_language(
                	session.user_id
                )
                -- item 3928
                local response = build_receipt(
                      trans_id,
                      details,
                      language
                )
                -- item 3929
                response.type = "coupon"
                response.trans_id = trans_id
                -- item 3930
                return make_json_success(headers, response)
            else
                -- item 3913
                message = details
                -- item 3916
                db.rollback()
                -- item 3901
                return result_from_message(
                	headers,
                	message
                )
            end
        else
            -- item 3905
            message = "ERR_COUPON_NOT_FOUND"
            -- item 3916
            db.rollback()
            -- item 3901
            return result_from_message(
            	headers,
            	message
            )
        end
    else
        -- item 3905
        message = "ERR_COUPON_NOT_FOUND"
        -- item 3916
        db.rollback()
        -- item 3901
        return result_from_message(
        	headers,
        	message
        )
    end
end

function api_visit_folder(req, session, headers)
    -- item 975
    local space_id = req:stash("first")
    local folder_id = req:stash("second")
    -- item 968
    local ok, result = space.get_folder(
    	space_id,
    	folder_id,
    	true,
    	session.user_id,
    	session.admin
    )
    -- item 970
    if ok then
        -- item 976
        result.user_name = session.name
        -- item 974
        return make_json_success(headers, result)
    else
        -- item 973
        return result_from_message(headers, result)
    end
end

function build_pay_description(details)
    -- item 2467
    return "Subscription: "
    .. tostring(details.product_id) .. ", "
    .. tostring(details.users) .. " user(s)"
end

function build_product_code(details)
    -- item 2831
    if details.product_id == "extended" then
        -- item 2834
        return details.product_id
    else
        -- item 2830
        return tostring(details.product_id) .. "-"
        .. tostring(details.users)
    end
end

function build_product_name(language, product_id, max_users)
    -- item 2927
    local product = utils.get_product(product_id)
    -- item 1994
    local name = translate(
    	language,
    	product.name
    )
    -- item 1995
    if product_id == "team" then
        -- item 1998
        local users = translate(
        	language,
        	"MES_NUM_USERS"
        )
        -- item 1999
        name = name .. ". " .. users .. ": "
          .. tostring(max_users)
    end
    -- item 2741
    name = name:gsub("<br />", " ")
    -- item 2000
    return name
end

function build_receipt(agreement_id, agreement, language)
    -- item 2772
    local currency = agreement.currency
    -- item 2773
    local date = localize_time(
    	language,
    	os.time()
    )
    -- item 2771
    local product_name = translate(
    	language,
    	agreement.product_name
    )
    -- item 2774
    local result = {}
    -- item 2770
    result.product_name = product_name
    result.max_diagrams = get_maxed_number(language, agreement.max_diagrams)
    result.max_spaces = get_maxed_number(language, agreement.max_spaces)
    result.users = tostring(agreement.users)
    result.price = print_amount(currency, agreement.price)
    result.total = print_amount(currency, agreement.total)
    result.total_num = agreement.total
    result.trans_id = agreement_id
    result.date = date
    result.mva = print_amount(currency, agreement.mva)
    result.currency = currency
    result.trans_number = agreement.payment1
    -- item 2775
    return result
end

function calc_own(user_id)
    -- item 4932
    local spaces = get_own_spaces(user_id)
    -- item 4933
    return #spaces
end

function calc_period(product)
    -- item 1909
    local period_sec = utils.months_to_secs(product.period_mon)
      + utils.days_to_secs(1)
    -- item 1916
    return period_sec
end

function calculate_due_time()
    -- item 3583
    return utils.add_months(
    	os.time(),
    	1
    )
end

function calculate_payment(product_id, users, old_license)
    -- item 2228
    local product = utils.get_product(
    	product_id
    )
    -- item 2230
    if (product) and (not (users > product.max_users)) then
        -- item 2248
        local now = os.time()
        -- item 2236
        local details = pay.calculate_payment(
        	users,
        	product_id,
        	old_license,
        	price_cfg,
        	now
        )
        -- item 2245
        if details.error then
            -- item 2247
            return false, details.error
        else
            -- item 2237
            details.users = users
            details.product_id = product_id
            details.product_name = product.name
            details.max_diagrams = product.max_diagrams
            details.max_spaces = product.max_spaces
            details.currency = price_cfg.currency
            -- item 2235
            return true, details
        end
    else
        -- item 2233
        return false, "MES_BAD_PRODUCT"
    end
end

function check_license(user_id)
    -- item 2100
    local action = function()
    	check_license_core(user_id)
    end
    -- item 2101
    db.invoke_no_throw(
    	action,
    	"check_license " .. user_id
    )
end

function check_license_core(user_id)
    -- item 2098
    if user_id == "admin" then
        
    else
        -- item 2086
        local user = vud.get_user(user_id)
        -- item 2087
        if user then
            -- item 3711
            local license_id = user.license
            local license = lic.get_raw_license(license_id)
            -- item 3712
            if license then
                -- item 3882
                local agreement_id = license.agreement_id
                -- item 3717
                if license.active then
                    -- item 3721
                    local now = os.time()
                    local expiry = license.expiry
                    -- item 3722
                    if now > expiry then
                        -- item 3737
                        db.begin()
                        -- item 3724
                        lic.update_license(
                        	license_id,
                        	{active = false}
                        )
                        -- item 2093
                        update_users_spaces(user_id)
                        -- item 3738
                        db.commit()
                        -- item 2099
                        ej.info(
                        	"license_expiration",
                        	{user_id=user_id,
                        	license_id=license_id}
                        )
                        -- item 2097
                        module.send_expiration_notice(user_id)
                    else
                        -- item 3725
                        local left = expiry - now
                        -- item 3726
                        if (left > WARNING_BEFORE) or (license.warning_sent) then
                            
                        else
                            -- item 3730
                            lic.update_license(
                            	license_id,
                            	{warning_sent = true}
                            )
                            -- item 2096
                            module.send_expiration_soon(
                            	user_id,
                            	expiry
                            )
                        end
                        -- item 3735
                        if license.agreement_id then
                            -- item 3741
                            local agreement = db.agreement_get(
                            	license.agreement_id
                            )
                            -- item 3753
                            if ((agreement) and (agreement.state == "active")) and (now > agreement.due) then
                                -- item 3881
                                try_autopay(agreement_id)
                            end
                        end
                    end
                end
            end
        end
    end
end

function check_scheduled(agreement_id)
    -- item 3874
    local action = function()
    	try_autopay(agreement_id)
    end
    -- item 3876
    db.invoke_no_throw(
    	action,
    	"try_autopay " .. agreement_id
    )
end

function choose_language(req, session, url_language)
    -- item 1520
    local acc_lang = req:header("accept-language")
    local chosen = req:cookie("language")
    -- item 1521
    local language = find_language(
    	session.user_id,
    	chosen,
    	acc_lang,
    	url_language
    )
    -- item 1522
    local norm = norm_language(language)
    -- item 1523
    return norm
end

function complete_transaction(user_id, trans_id, status)
    -- item 2308
    lic.update_transaction(
    	trans_id,
    	{completed=true, status=status}
    )
    -- item 2309
    ej.info(
    	"complete_transaction",
    	{user_id=user_id, trans_id=trans_id, status=status}
    )
end

function cookie_date(time)
    -- item 55
    return os.date("!%a, %Y %b %d %H:%M:%S GMT", time)
end

function count_admins(space_id)
    -- item 4983
    local rights = db.rights_get_by_space(
    	space_id
    )
    -- item 4981
    local count = 0
    for _, right in ipairs(rights) do
        -- item 4977
        local access = right[3]
        -- item 4978
        if access == "admin" then
            -- item 4976
            count = count + 1
        end
    end
    -- item 4982
    return count
end

function create_agreement(details)
    -- item 3315
    local id
    while true do
        -- item 3310
        id = utils.random_string()
        id = id:sub(1, 8)
        -- item 3311
        local old = db.agreement_get(id)
        -- item 3312
        if old then
            
        else
            break
        end
    end
    -- item 3333
    local data = utils.copy(details)
    data.state = "created"
    data.when_created = clock.time()
    data.when_updated = data.when_created
    -- item 3442
    local year = 366 * 24 * 3600
    data.expiry = data.when_created + year
    -- item 3316
    db.agreement_insert(
    	id,
    	"",
    	data
    )
    -- item 3317
    return id
end

function create_cinfo(page_code, content_path, content, title, description)
    -- item 4522
    local self = {}
    -- item 4524
    self.page_code = page_code or ""
    self.content_path = content_path or ""
    self.content = content or ""
    self.title = title or ""
    self.description = description or ""
    -- item 4523
    return self
end

function create_content_cinfo(language, content_path)
    -- item 4569
    local page_code
    -- item 4565
    if content_path == "" then
        -- item 4568
        page_code = "main"
    else
        -- item 4570
        page_code = content_path
    end
    -- item 4616
    local content = load_content(
    	global_cfg.content_dir,
    	language,
    	page_code,
    	"html"
    )
    -- item 4564
    local title = get_content_element(language, "title", page_code)
    local description = get_content_element(language, "desc", page_code)
    -- item 4571
    local cinfo = create_cinfo(
    	page_code,
    	content_path,
    	content,
    	title,
    	description
    )
    -- item 4572
    return cinfo
end

function create_default_license(user_id, tag)
    -- item 2121
    local product_id
    local max_users
    local period
    -- item 4794
    local product = utils.get_product(
    	global_cfg.create_license
    )
    -- item 4115
    if global_cfg.on_premises then
        -- item 4117
        max_users = 500
        period = 20 * 12 * utils.days_to_secs(30)
        product_id = "team"
    else
        -- item 4796
        max_users = product.max_users
        product_id = global_cfg.create_license
        -- item 4797
        
        period = utils.months_to_secs(
        	product.period_mon
        )
    end
    -- item 2125
    local user = vud.get_user(user_id)
    -- item 2126
    if (user) and (not (user.license)) then
        -- item 2109
        local product = utils.get_product(product_id)
        -- item 2112
        local start = os.time()
        local expiry = start + period
        -- item 3484
        local trans_id = nil
        local agreement_id = nil
        -- item 3502
        create_license_for_user(
        	user_id,
        	product_id,
        	product.max_diagrams,
        	product.max_spaces,
        	max_users,
        	expiry,
        	trans_id,
        	agreement_id,
        	tag
        )
    end
end

function create_empty_cinfo(req, language)
    -- item 4554
    return create_cinfo(
    	nil,
    	nil,
    	nil,
    	nil,
    	nil
    )
end

function create_land_cinfo(req, language)
    -- item 4846
    local page_code = req:stash("id")
    local content_path = "land/" .. page_code
    -- item 4845
    local info_json = load_content(
    	global_cfg.read_dir,
    	language,
    	page_code,
    	"json"
    )
    -- item 4847
    if info_json then
        -- item 4843
        local page_info = json.decode(info_json)
        -- item 4841
        local cinfo = create_cinfo(
        	page_code,
        	content_path,
        	content,
        	page_info.title,
        	page_info.description
        )
        -- item 4851
        cinfo.skip_header = page_info.skip_header
        cinfo.skip_footer = page_info.skip_footer
        cinfo.blocks = page_info.blocks
        -- item 4842
        return cinfo
    else
        -- item 4850
        return nil, "ERR_NOT_FOUND"
    end
end

function create_license(user_id, product_id, max_diagrams, max_spaces, users, expiry, trans_id, agreement_id, tag)
    -- item 2656
    local user = vud.get_user(user_id)
    -- item 2660
    local old = lic.delete_license(user.license)
    -- item 3501
    create_license_for_user(
    	user_id,
    	product_id,
    	max_diagrams,
    	max_spaces,
    	users,
    	expiry,
    	trans_id,
    	agreement_id,
    	tag
    )
    -- item 3479
    return old
end

function create_license_for_user(user_id, product_id, max_diagrams, max_spaces, users, expiry, trans_id, agreement_id, tag)
    -- item 3497
    local limits = {
    	max_diagrams = max_diagrams,
    	max_spaces = max_spaces,
    	max_users = users
    }
    -- item 3499
    local license_id = lic.create_license(
    	user_id,
    	product_id,
    	expiry,
    	limits,
    	trans_id,
    	agreement_id,
    	tag
    )
    -- item 3495
    vud.set_user_prop(
    	user_id,
    	"license",
    	license_id
    )
    -- item 3496
    update_users_spaces(user_id)
    -- item 3498
    ej.info(
    	"create_license",
    	{user_id=user_id, license_id=license_id, tag=tag}
    )
    -- item 4716
    return license_id
end

function create_payment(user_id, agreement_id, total, mva, currency, trans_number, method, users, product_id, product_name)
    -- item 3588
    db.payment_insert(
    	user_id,
    	{
    		user_id = user_id,
    		agreement_id = agreement_id,
    		total = total,
    		mva = mva,
    		currency = currency,
    		trans_number = trans_number,
    		method = method,
    		when_created = os.time(),
    		details = {
    			users = users,
    			product_id = product_id,
    			product_name = product_name
    		}
    	}
    )
    -- item 3793
    ej.info(
    	"payment",
    	{
    		user_id = user_id,
    		agreement_id = agreement_id,
    		total = total,
    		mva = mva,
    		currency = currency,
    		trans_number = trans_number
    	}
    )
end

function create_read_cinfo(req, language)
    -- item 4619
    local page_code = req:stash("id")
    local content_path = "read/" .. page_code
    -- item 4617
    local content = load_content(
    	global_cfg.read_dir,
    	language,
    	page_code,
    	"html"
    )
    -- item 4618
    local info_json = load_content(
    	global_cfg.read_dir,
    	language,
    	page_code,
    	"json"
    )
    -- item 4802
    if info_json then
        -- item 4614
        local page_info = json.decode(info_json)
        -- item 4599
        local cinfo = create_cinfo(
        	page_code,
        	content_path,
        	content,
        	page_info.title,
        	page_info.description
        )
        -- item 4823
        cinfo.skip_header = page_info.skip_header
        cinfo.skip_footer = page_info.skip_footer
        -- item 4600
        return cinfo
    else
        -- item 4805
        return nil, "ERR_NOT_FOUND"
    end
end

function create_transaction(user_id, type, details)
    -- item 2326
    local now = os.time()
    local timeout = 20 * 60
    -- item 2325
    local tdata = {
    	details = details,
    	expiry = now + timeout
    }
    -- item 2324
    local trans_id = lic.create_transaction(
    	user_id,
    	type,
    	tdata
    )
    -- item 2362
    return trans_id
end

function create_user_core(req, session, headers, data, password)
    -- item 4317
    local msg, language
    -- item 4331
    local ip = get_client_ip(req)
    -- item 4315
    db.begin()
    -- item 4299
    msg = vud.create_user(
    	data.name,
    	data.email,
    	password,
    	session.session_id,
    	data.src,
    	ip
    )
    -- item 4309
    if msg then
        -- item 4318
        db.rollback()
        -- item 4330
        return false, msg
    else
        -- item 4319
        local user_id = data.name:lower()
        space.create_space(user_id, user_id)
        -- item 4322
        if data.language then
            -- item 4328
            language = data.language
        else
            -- item 4329
            language = choose_language(req, session, "")
        end
        -- item 4321
        local theme = {language = language}
        space.set_theme(user_id, theme)
        -- item 4325
        ej.info(
        	"create_user",
        	{user_id=user_id, src=data.src,
        	session_id=session.session_id}
        )
        -- item 4312
        local ok, msg, user_id, email, new_session = vud.logon(
        	session.session_id,
        	data.name,
        	password
        )
        -- item 4316
        db.commit()
        -- item 4327
        local result = {
        	id = user_id,
        	name = data.name,
        	language = language,
        	email = data.email
        }
        -- item 4326
        return true, result, new_session
    end
end

function decode_data_url(data)
    -- item 1443
    local start = "data:image/png;base64,"
    -- item 1444
    if #data < #start then
        -- item 1447
        return data
    else
        -- item 1449
        local head = data:sub(
        	1,
        	#start
        )
        -- item 1451
        if head == start then
            -- item 1448
            local body = data:sub(
            	#start + 1,
            	#data
            )
            -- item 1450
            return digest.base64_decode(body)
        else
            -- item 1447
            return data
        end
    end
end

function delete_agreement(agreement_id)
    -- item 3600
    if agreement_id then
        -- item 3605
        local agreement = db.agreement_get(agreement_id)
        -- item 3606
        if agreement then
            -- item 3608
            db.agreement_delete(agreement_id)
            -- item 3604
            local delayed_call = function()
            	payex.delete_agreement(
            		agreement.agreement_ref,
            		agreement.user_id,
            		agreement_id
            	)
            end
            -- item 4092
            db.run_in_fiber(
            	delayed_call,
            	"delete agreement in pay ex"
            )
            -- item 3619
            ej.info(
            	"delete_agreement",
            	{
            		user_id = agreement.user_id,
            		agreement_id = agreement_id,
            		agreement_ref = agreement.agreement_ref
            	}
            )
        end
    end
end

function delete_download(download_id)
    -- item 1416
    local timeout_min = 10
    local timeout = timeout_min * 60
    fiber.sleep(timeout)
    -- item 1415
    take_download(download_id)
end

function delete_user(user_id)
    -- item 2696
    db.begin()
    -- item 2710
    local user = vud.get_user(user_id)
    -- item 2711
    if user then
        -- item 2693
        space.delete_recent(user_id)
        -- item 2702
        local own_spaces = get_own_spaces(user_id)
        for _, space_id in ipairs(own_spaces) do
            -- item 4968
            db.rights_delete(
            	space_id,
            	user_id,
            	"admin"
            )
            -- item 4985
            if count_admins(space_id) == 0 then
                -- item 2705
                space.delete_space(
                	space_id,
                	user_id,
                	true
                )
            else
                -- item 4989
                space.update_space_limits(space_id)
            end
        end
        -- item 2715
        space.delete_theme(user_id)
        -- item 2694
        vud.logout_all(user_id)
        -- item 2695
        vud.delete_user(user_id)
    end
    -- item 2697
    db.commit()
end

function delete_user_payments(user_id)
    -- item 3615
    local all = db.payment_get_by_user(user_id)
    for _, tran in ipairs(all) do
        -- item 3618
        local id = tran[1]
        db.payment_delete(id)
    end
end

function download_svg(req, headers, record)
    -- item 1565
    local original = record.data.image
    local status = 200
    local filename = record.filename
    local output = original
    -- item 1569
    set_content_type(headers, filename)
    -- item 1568
    headers["content-disposition"] =
      "attachment; filename=" .. filename
    -- item 1584
    local start = original:find("<defs")
    -- item 1579
    if start == nil then
        
    else
        -- item 1585
        local head = original:sub(1, start-1)
        local tail = original:sub(start)
        -- item 1588
        local tmp_filename = global_cfg.tmp .. "/"
         .. utils.random_string() .. ".down"
        -- item 1591
        local tmp_file = io.open(
        	tmp_filename,
        	"wb"
        )
        -- item 1589
        if tmp_file then
            -- item 1594
            tmp_file:write(head)
            -- item 1595
            tmp_file:write(
             "<style xmlns=\"http://www.w3.org/1999/xhtml\">\n"
            )
            for _, font in ipairs(record.data.fonts) do
                -- item 1605
                local font_filename = global_cfg.static_dir
                 .. "/fonts/" .. font.file:gsub(".ttf", ".woff.b64")
                -- item 1606
                local font_data = utils.read_all_bytes(
                	font_filename
                )
                -- item 1608
                write_font_header(font, tmp_file)
                -- item 1607
                tmp_file:write(font_data)
                -- item 1636
                write_font_footer(font, tmp_file)
            end
            -- item 1598
            tmp_file:write("\n\n</style>")
            -- item 1597
            tmp_file:write(tail)
            -- item 1599
            tmp_file:close()
            -- item 1600
            output = utils.read_all_bytes(
            	tmp_filename
            )
            -- item 1601
            os.remove(tmp_filename)
        end
    end
    -- item 1566
    local resp = {
    	status = status,
    	body = output,
    	headers = headers
    }
    -- item 1567
    return resp
end

function expires_later(headers)
    -- item 88
    local header = string.format(
     "max-age=%d",
     global_cfg.static_timeout
    )
    -- item 86
    headers["cache-control"] = header
end

function expires_now(headers)
    -- item 79
    headers["cache-control"] = 
     "no-cache, private, no-store, must-revalidate, max-age=0"
    -- item 80
    headers["expires"] = "0"
end

function find_agreement_by_order_ref(order_ref, user_id)
    -- item 3427
    local found = db.agreement_get_by_order_ref(order_ref)
    for _, row in ipairs(found) do
        -- item 3430
        local fields = row[3]
        -- item 3432
        if fields.user_id == user_id then
            -- item 3435
            return true, row[1], fields
        end
    end
    -- item 3440
    ej.info(
      "agreement_not_found",
      {
        order_ref = order_ref,
        user_id = user_id
      }
    )
    -- item 3431
    return false
end

function find_api_handler(api_method, method, session)
    -- item 130
    local key = api_method .. "/" .. method
    -- item 131
    local handler_info = api_handlers[key]
    -- item 132
    if handler_info then
        -- item 148
        if handler_info.must_admin then
            -- item 151
            if session.admin then
                -- item 165
                return handler_info.handler
            else
                -- item 154
                ej.info(
                	"admin api failed",
                	{user_id = session.user_id, key=key}
                )
                -- item 135
                return wrong_api_handler
            end
        else
            -- item 156
            if handler_info.must_logon then
                -- item 162
                if session.user_id == "" then
                    -- item 166
                    return not_logged_handler
                else
                    -- item 164
                    return handler_info.handler
                end
            else
                -- item 165
                return handler_info.handler
            end
        end
    else
        -- item 155
        log.error("api hander not found: " .. key)
        -- item 135
        return wrong_api_handler
    end
end

function find_in_block(language_list, block)
    -- item 4866
    local bparts = utils.split(block, ";")
    for _, bpart in ipairs(bparts) do
        -- item 4859
        local found = language_list[bpart]
        -- item 4860
        if found then
            -- item 4861
            return found
        end
    end
    -- item 4864
    return nil
end

function find_language(user_id, chosen, acc_lang, url_language)
    -- item 1131
    local language = "en-us"
    local success, uset, language_blocks
    local found
    -- item 1333
    if url_language == "" then
        -- item 1164
        if user_id == "" then
            -- item 1170
            if chosen then
                -- item 1172
                language = chosen
            else
                -- item 1129
                if (acc_lang) and (not (acc_lang == "")) then
                    -- item 1189
                    acc_lang = string.lower(acc_lang)
                    -- item 1135
                    language_blocks = utils.split(
                    	acc_lang,
                    	","
                    )
                    for _, block in ipairs(language_blocks) do
                        -- item 1141
                        found = find_in_block(
                        	language_list,
                        	block
                        )
                        -- item 1142
                        if found then
                            -- item 1145
                            language = found
                            break
                        end
                    end
                end
            end
        else
            -- item 1163
            success, uset = space.get_theme(user_id)
            -- item 1182
            if (success) and (uset.language) then
                -- item 1169
                language = uset.language
            else
                -- item 1170
                if chosen then
                    -- item 1172
                    language = chosen
                else
                    -- item 1129
                    if (acc_lang) and (not (acc_lang == "")) then
                        -- item 1189
                        acc_lang = string.lower(acc_lang)
                        -- item 1135
                        language_blocks = utils.split(
                        	acc_lang,
                        	","
                        )
                        for _, block in ipairs(language_blocks) do
                            -- item 1141
                            found = find_in_block(
                            	language_list,
                            	block
                            )
                            -- item 1142
                            if found then
                                -- item 1145
                                language = found
                                break
                            end
                        end
                    end
                end
            end
        end
    else
        -- item 1334
        language = url_language
    end
    -- item 1132
    return language
end

function find_payment_by_user_trans_num(user_id, trans_number)
    -- item 4058
    local all = db.payment_get_by_user(user_id)
    for _, tran in ipairs(all) do
        -- item 4060
        local payment = tran[3]
        -- item 4063
        if payment.trans_number == trans_number then
            -- item 4066
            return payment
        end
    end
    -- item 4067
    return nil
end

function find_relevant_agreement(order_ref)
    -- item 3671
    local found = db.agreement_get_by_order_ref(order_ref)
    for _, row in ipairs(found) do
        -- item 3674
        local fields = row[3]
        -- item 3676
        if (fields.state == "active") or (fields.state == "created") then
            -- item 3679
            return true, row[1], fields
        end
    end
    -- item 3680
    ej.info(
      "agreement_not_found",
      {
        order_ref = order_ref
      }
    )
    -- item 3675
    return false
end

function ga()
    -- item 2571
    return [[
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-85987998-1', 'auto');
      ga('send', 'pageview');
    
    </script>
    ]]
end

function get_access_for_user(user_id, output)
    -- item 4894
    local rights = db.rights_get_by_user(
    	user_id
    )
    -- item 4895
    local space_list = {}
    local access_list = {}
    -- item 4906
    local by_space = utils.group_by(
    	rights,
    	1
    )
    for space_id, group in pairs(by_space) do
        -- item 4907
        local access = get_max_access(group)
        -- item 4893
        local space_info = {
        	space_id = space_id,
        	access = access
        }
        -- item 4892
        table.insert(
        	access_list,
        	space_info
        )
        -- item 4908
        table.insert(
        	space_list,
        	space_id
        )
    end
    -- item 4909
    output.spaces_access = access_list
    output.spaces = space_list
end

function get_client_ip(req)
    -- item 3027
    local ip = req:header("x-real-ip")
    -- item 3696
    if ip then
        
    else
        -- item 3701
        ip = req:peer().host
    end
    -- item 3028
    return ip
end

function get_completed_trans(user_id, trans_id)
    -- item 2342
    if trans_id then
        -- item 2346
        local transaction = lic.get_transaction(trans_id)
        -- item 2347
        if ((transaction) and (transaction.user_id == user_id)) and (transaction.completed) then
            -- item 2352
            return transaction
        else
            -- item 2345
            return nil
        end
    else
        -- item 2345
        return nil
    end
end

function get_content_element(language, prefix, path)
    -- item 4385
    if path then
        -- item 4389
        local key = prefix .. "-" .. path
        -- item 4390
        return trans.translate(
        	language,
        	"index",
        	key
        )
    else
        -- item 4388
        return ""
    end
end

function get_license_info(user_id)
    -- item 4632
    local result = {
    	current_plan = "none",
    	had_trial = false,
    	is_trial = false,
    	ref = ""
    }
    -- item 4634
    if utils.is_empty(user_id) then
        
    else
        -- item 4637
        local user_row = vud.find_user(user_id)
        -- item 4638
        if user_row then
            -- item 4639
            local user = user_row[3]
            -- item 4640
            result.had_trial = user.had_trial or false
            result.current_plan = "basic"
            result.ref = user.ref or ""
            -- item 4641
            local license = lic.get_license(user.license)
            -- item 4642
            if license then
                -- item 4643
                result.is_trial = license.is_trial or false
                result.current_plan = license.product_id
            end
        end
    end
    -- item 4633
    return result
end

function get_max_access(rows)
    -- item 4901
    local access = {}
    for _, row in ipairs(rows) do
        -- item 4905
        local right = row[3]
        access[right] = true
    end
    -- item 4910
    if access.admin then
        -- item 4913
        return "admin"
    else
        -- item 4914
        if access.write then
            -- item 4916
            return "write"
        else
            -- item 4917
            return "read"
        end
    end
end

function get_maxed_number(language, number)
    -- item 2548
    if number >= 10000 then
        -- item 2551
        return translate(language, "MES_UNLIMITED")
    else
        -- item 2552
        return tostring(number)
    end
end

function get_next_product(product_id)
    -- item 17960001
    if product_id == "basic" then
        -- item 1804
        return "extended"
    else
        -- item 17960002
        if product_id == "trial" then
            -- item 4439
            return "team"
        else
            -- item 17960003
            if product_id == "extended" then
                -- item 1805
                return "team"
            else
                -- item 17960004
                if product_id == "team" then
                    
                else
                    -- item 17960005
                    error(product_id)
                end
                -- item 1806
                return nil
            end
        end
    end
end

function get_old_license(license_id)
    -- item 2425
    if license_id then
        -- item 2424
        local license = lic.get_license(license_id)
        -- item 2430
        if license then
            -- item 2431
            license.expiry = license.expiry or os.time()
            license.sum = license.sum or 0
            license.period = license.period or 366 * 24 * 3600
            -- item 2429
            return license
        else
            -- item 2428
            return nil
        end
    else
        -- item 2428
        return nil
    end
end

function get_only_own_spaces(user_id)
    -- item 4950
    local spaces = get_own_spaces(user_id)
    -- item 4967
    return utils.filter(
    	spaces,
    	has_one_admin
    )
end

function get_own_spaces(user_id)
    -- item 2637
    local result = {}
    -- item 4927
    local rights = db.rights_get_by_user(
    	user_id
    )
    for _, right in ipairs(rights) do
        -- item 4928
        local space_id = right[1]
        local access = right[3]
        -- item 4929
        if access == "admin" then
            -- item 4926
            table.insert(
            	result,
            	space_id
            )
        end
    end
    -- item 2655
    table.sort(result)
    -- item 2638
    return result
end

function get_product_diagram_limit(product_id)
    -- item 1869
    local product = utils.get_product(product_id)
    -- item 1870
    return product.max_diagrams
end

function get_product_space_limit(product_id)
    -- item 1876
    local product = utils.get_product(product_id)
    -- item 1877
    return product.max_spaces
end

function get_product_user_limit(product_id)
    -- item 1786
    local product = utils.get_product(product_id)
    -- item 1787
    return product.max_users
end

function get_renew_path(language)
    -- item 2027
    local lp = utils.make_language_path(language)
    -- item 2028
    return global_cfg.my_site .. "/" .. lp .. "/buy"
end

function get_req()
    -- item 31
    return greq
end

function get_space_limit(user_id)
    -- item 1919
    local limits = space.get_user_limits(user_id)
    -- item 1249
    return limits.max_spaces
end

function get_trans(user_id, trans_id)
    -- item 3091
    if trans_id then
        -- item 3095
        local transaction = lic.get_transaction(trans_id)
        -- item 3096
        if (transaction) and (transaction.user_id == user_id) then
            -- item 3101
            return transaction
        else
            -- item 3094
            return nil
        end
    else
        -- item 3094
        return nil
    end
end

function get_uncompleted_trans(user_id, trans_id)
    -- item 2283
    if trans_id then
        -- item 2287
        local transaction = lic.get_transaction(trans_id)
        -- item 2288
        if ((transaction) and (transaction.user_id == user_id)) and (not (transaction.completed)) then
            -- item 2291
            local now = os.time()
            -- item 2292
            if transaction.expiry < now then
                -- item 2286
                return nil
            else
                -- item 2293
                return transaction
            end
        else
            -- item 2286
            return nil
        end
    else
        -- item 2286
        return nil
    end
end

function get_user_language(user_id)
    -- item 2006
    local success, uset = space.get_theme(user_id)
    -- item 2019
    local language
    -- item 2008
    if (success) and (uset.language) then
        -- item 2010
        language = norm_language(uset.language)
    else
        -- item 2009
        language = "en-us"
    end
    -- item 2021
    return language
end

function handle(filename)
    -- item 344
    local handler = function(req)
    	return handle_file_for_path(req, filename)
    end
    -- item 345
    return handler
end

function handle_cookie(req, headers)
    -- item 3029
    local ip = get_client_ip(req)
    -- item 529
    local referer = req:header("referer")
    local path = req:path()
    -- item 39
    local session_id = req:cookie("session_id")
    local session = vud.get_create_session(
    	session_id,
    	ip,
    	referer,
    	path,
    	true
    )
    session_id = session.session_id
    -- item 386
    set_session_cookie(headers, session_id)
    -- item 40
    return session
end

function handle_file_for_path(req, filename)
    -- item 337
    local headers = {}
    -- item 338
    handle_cookie(req, headers)
    -- item 336
    return serve_file(req, headers, filename)
end

function handle_template(req, page, url_language, caching_allowed, cinfo_maker)
    -- item 4467
    local headers = {}
    -- item 4479
    if caching_allowed then
        
    else
        -- item 4482
        expires_now(headers)
    end
    -- item 4465
    local session = handle_cookie(req, headers)
    -- item 4483
    local referer = req:header("referer") or ""
    -- item 4472
    local language = choose_language(
    	req,
    	session,
    	url_language
    )
    -- item 4473
    log_page_request(req, session, language)
    -- item 4548
    local cinfo, error_message = cinfo_maker(req, language)
    -- item 4798
    if error_message then
        -- item 4801
        return result_from_message(headers, error_message)
    else
        -- item 4625
        local license_info = get_license_info(session.user_id)
        -- item 4468
        local vars = {
        	math = math,
        	my_site = global_cfg.my_site,
        	content_path = cinfo.content_path,
        	page_code = cinfo.page_code,
        	title = cinfo.title,
        	description = cinfo.description,
        	content = cinfo.content,
        	skip_header = cinfo.skip_header or false,
        	skip_footer = cinfo.skip_footer or false,
        	blocks = cinfo.blocks or {},
        	language = language,
        	short_language = language:sub(1, 2),
        	page = page,
        	trans = make_trans(language, page),
        	messages = global_cfg.messages[language],
        	user_id = session.user_id or "",
        	user_name = session.name or "",
        	admin = session.admin or false,
        	debug = session.debug,
        	url_language = url_language,
        	try_me = (req:path() == "/try-me"),
        	build_id = global_cfg.build_id,
        	use_capture = global_cfg.use_capture,
        	include = include,
        	referer = referer,
        	yandex_metrika = global_cfg.yandex_metrika or false,
        	carrot = global_cfg.carrot or false,
        	capterra = global_cfg.capterra or false,
        	on_premises = global_cfg.on_premises or false,
        
        	currency = price_cfg.currency,
        	min_payment = price_cfg.min_payment,
        
        	basic_max_diagrams = price_cfg.products.basic.max_diagrams,
        	basic_max_spaces = price_cfg.products.basic.max_spaces,
        	basic_period = price_cfg.products.basic.period_mon,
        
        
        	extended_price = price_cfg.products.extended.price,
        	extended_max_diagrams = price_cfg.products.extended.max_diagrams,
        	extended_max_spaces = price_cfg.products.extended.max_spaces,
        	extended_period = price_cfg.products.extended.period_mon,
        	extended_min_users = price_cfg.products.extended.min_users,
        	extended_max_users = price_cfg.products.extended.max_users,
        
        	team_price = price_cfg.products.team.price,
        	team_max_diagrams = price_cfg.products.team.max_diagrams,
        	team_max_spaces = price_cfg.products.team.max_spaces,
        	team_period = price_cfg.products.team.period_mon,
        	team_min_users = price_cfg.products.team.min_users,
        	team_max_users = price_cfg.products.team.max_users,
        
        	current_plan = license_info.current_plan,
        	had_trial = license_info.had_trial,
        	is_trial = license_info.is_trial,
        	ref = license_info.ref,
        
        	mva = price_cfg.mva,
        
        	application = global_cfg.application,
        	paysys = external_creds.paysys,
        	complete_delay = global_cfg.complete_delay
        }
        -- item 4474
        if global_cfg.google_anal then
            -- item 4477
            vars.google_anal = ga()
        else
            -- item 4478
            vars.google_anal = ""
        end
        -- item 4463
        local resp = req:render(vars)
        for key, value in pairs(headers) do
            -- item 4471
            resp.headers[key] = value
        end
        -- item 4466
        resp.headers["final-language"] = language
        resp.headers["content-type"] = "text/html; charset=utf-8"
        resp.status = 200
        -- item 4464
        return resp
    end
end

function has_one_admin(space_id)
    -- item 4984
    local count = count_admins(space_id)
    -- item 4965
    return count == 1
end

function include(name)
    -- item 1704
    local result = '<script src="/static/' .. name
      .. global_cfg.build_id .. '.js"></script>'
    -- item 1705
    return result
end

function inject_send_mail(injected)
    -- item 3575
    send_mail = injected
end

function is_agreement_active(agreement)
    -- item 4021
    if (agreement) and ((agreement.state == "active") or (agreement.state == "retrying")) then
        -- item 3988
        return true
    else
        -- item 3987
        return false
    end
end

function is_null(item)
    -- item 1095
    if (item == nil) or (item == json.null) then
        -- item 1098
        return true
    else
        -- item 1102
        return false
    end
end

function land_route(path)
    -- item 4830
    local root_path = path
    local path_ru = "/ru" .. root_path
    local path_en = "/en" .. root_path
    -- item 4832
    local caching_allowed = true
    local file = "land.html.el"
    -- item 4835
    local cinfo_maker = create_land_cinfo
    -- item 4829
    router:route(
    	{path=path_ru, file=file},
    	make_template("index", "ru", caching_allowed, cinfo_maker)
    )
    -- item 4831
    router:route(
    	{path=path_en, file=file},
    	make_template("index", "en", caching_allowed, cinfo_maker)
    )
    -- item 4834
    router:route(
    	{path=root_path, file=file},
    	make_template("index", "", caching_allowed, cinfo_maker)
    )
end

function load_content(content_dir, language, page_code, extension)
    -- item 4396
    if page_code then
        -- item 4406
        local content
        -- item 4411
        local localized = localize_page_code(
        	page_code,
        	language
        )
        -- item 4404
        local path = content_dir .. "/" ..
          localized .. "." .. extension
        -- item 4409
        content = utils.read_all_bytes(path)
        -- item 4408
        return content
    else
        -- item 4399
        return ""
    end
end

function localize_page_code(page_code, language)
    -- item 4608
    if language == "ru" then
        -- item 4611
        return "ru-" .. page_code
    else
        -- item 4612
        return page_code
    end
end

function localize_time(language, time)
    -- item 2035
    local parts = os.date("*t", time)
    -- item 2036
    local month_id = "MES_MONTH_" .. tostring(parts.month)
    local month = translate(language, month_id)
    -- item 2037
    return tostring(parts.day) .. "-"
     .. month .. "-" .. tostring(parts.year)
end

function log_page_request(req, session, language)
    -- item 1643
    if req:path() == "/try-me" then
        -- item 1647
        ej.info(
        	"try-me",
        	{path=req:path(),
        	session_id=session.session_id,
        	language=language}
        )
    end
end

function make_empty_response(headers)
    -- item 98
    local resp = {
    	status = 204,
    	headers = headers
    }
    -- item 99
    return resp
end

function make_fixture_name(id)
    -- item 1109
    local path = global_cfg.diatest .. "/" .. id .. ".txt"
    -- item 1110
    return path
end

function make_json_error(status, headers, message)
    -- item 174
    local data = {
    	error = message
    }
    -- item 173
    return make_json_response(status, headers, data)
end

function make_json_response(status, headers, data)
    -- item 89
    headers["content-type"] =
     "application/json; charset=utf8"
    -- item 72
    local body = json.encode(data)
    -- item 64
    local resp = {
    	status = status,
    	body = body,
    	headers = headers
    }
    -- item 66
    return resp
end

function make_json_success(headers, data)
    -- item 105
    return make_json_response(200, headers, data)
end

function make_template(page, url_language, caching_allowed, cinfo_maker)
    -- item 4556
    if cinfo_maker then
        
    else
        -- item 4555
        cinfo_maker = create_empty_cinfo
    end
    -- item 1180
    local result = function(req)
    	return handle_template(req, page, url_language, caching_allowed, cinfo_maker)
    end
    -- item 1181
    return result
end

function make_trans(language, page)
    -- item 1188
    return function(text)
    	return trans.translate(language, page, text)
    end
end

function norm_language(language)
    -- item 1352
    local norm = language_list[language]
    -- item 1349
    if norm then
        -- item 1353
        return norm
    else
        -- item 1354
        return "en-us"
    end
end

function not_logged_handler(req, session, headers)
    -- item 553
    return make_json_error(401, headers, "ERR_NOT_LOGGED_ON")
end

function on_autopay_success(user_id, agreement_id, agreement, trans_number, method, language)
    -- item 4043
    db.begin()
    -- item 4069
    local payment = find_payment_by_user_trans_num(
    	user_id,
    	trans_number
    )
    -- item 4070
    if payment then
        -- item 4073
        db.rollback()
        -- item 4075
        return false
    else
        -- item 4042
        db.scheduled_delete(agreement_id)
        -- item 4045
        agreement = update_agreement(
          agreement_id,
          {
            state = "active",
            due = calculate_due_time()
          }	
        )
        -- item 4046
        create_payment(
        	user_id,
        	agreement_id,
        	agreement.total,
        	agreement.mva,
        	agreement.currency,
        	trans_number,
        	method,
        	agreement.users,
        	agreement.product_id,
        	agreement.product_name
        )
        -- item 4044
        db.commit()
        -- item 4049
        local receipt = build_receipt(
              agreement_id,
              agreement,
              language
        )
        -- item 4050
        receipt.trans_number = trans_number
        -- item 4048
        send_autopay_email(
        	user_id,
        	receipt,
        	language,
        	true
        )
        -- item 4074
        return true
    end
end

function on_error(err)
    -- item 1650
    local data = {
    	err = err,
    	stack = debug.traceback()
    }
    -- item 405
    log.error(err)
    log.info(data.stack)
    -- item 1651
    ej.info("error", data)
end

function on_px2_complete(user_id, agreement_id, agreement, complete_result, language)
    -- item 3528
    local expiry = utils.date8_to_expiry(
    	complete_result.expiry
    )
    -- item 3563
    local trans_number = complete_result.trans_number
    -- item 3524
    db.begin()
    -- item 3527
    agreement = update_agreement(
      agreement_id,
      {
        state = "active",
        expiry = expiry,
        due = calculate_due_time(),
        payment1 = trans_number
      }	
    )
    -- item 3529
    create_payment(
    	user_id,
    	agreement_id,
    	agreement.total,
    	agreement.mva,
    	agreement.currency,
    	trans_number,
    	complete_result.method,
    	agreement.users,
    	agreement.product_id,
    	agreement.product_name
    )
    -- item 3530
    local trans_id = nil
    local old_agreement_id = nil
    -- item 3532
    local old_license = create_license(
    	user_id,
    	agreement.product_id,
    	agreement.max_diagrams,
    	agreement.max_spaces,
    	agreement.users,
    	expiry,
    	trans_id,
    	agreement_id,
    	"card"
    )
    -- item 3534
    if old_license then
        -- item 3603
        old_agreement_id = old_license.agreement_id
        -- item 3537
        if old_agreement_id then
            -- item 3538
            update_agreement(
              old_agreement_id,
              {
                state = "inactive"
              }	
            )
        end
    end
    -- item 3525
    db.commit()
    -- item 3547
    local make_receipt = function()
      return build_receipt(
          agreement_id,
          agreement,
          language
      )
    end
    -- item 3548
    local receipt = db.invoke_no_throw(
    	make_receipt,
    	"build receipt"
    ) or {}
    -- item 3545
    local send_email = function()
      send_congrat_email(
        user_id,
        receipt,
        language
      )
    end
    -- item 3546
    db.run_in_fiber(
    	send_email,
    	"send order success email"
    )
    -- item 3551
    if old_agreement_id then
        -- item 3554
        local delete_action = function()
        	delete_agreement(old_agreement_id)
        end
        -- item 3555
        db.run_in_fiber(
        	delete_action,
        	"delete old payex agreement"
        )
    end
    -- item 3577
    ej.info(
    	"payment_completed",
    	{agreement_id = agreement_id,
    	user_id = user_id,
    	total = agreement.total,
    	currency = agreement.currency,
    	trans_number = trans_number,
    	trace = agreement.trace,
    	product_id = agreement.product_id,
    	users = agreement.users,
    	language = agreement.language}
    )
    -- item 3556
    return receipt
end

function print_amount(currency, amount)
    -- item 2539
    if currency then
        -- item 2538
        return currency .. " " .. utils.print_amount(amount)
    else
        -- item 2542
        return ""
    end
end

function put_download(session, data, filename)
    -- item 1698
    ej.info(
    	"export",
    	{type = data.type}
    )
    -- item 1546
    local download_id = utils.random_string()
    -- item 1543
    local record = {
    	session_id = session.session_id,
    	download_id = download_id,
    	data = data,
    	filename = filename
    }
    -- item 1542
    ping_files[download_id] = record
    -- item 1551
    db.run_in_fiber(
    	function()
    		delete_download(download_id)
    	end,
    	"delete download"
    )
    -- item 1544
    local result = {
    	download_id = download_id
    }
    -- item 1545
    return result
end

function px2_calculate_payment(product_id, users, user_id)
    -- item 3292
    local product = utils.get_product(
    	product_id
    )
    -- item 3293
    if (product) and (not (users > product.max_users)) then
        -- item 3299
        local details = pay.px2_calculate_payment(
        	users,
        	product_id,
        	price_cfg
        )
        -- item 3301
        if details.error then
            -- item 3336
            ej.info(
            	"px2_calculate_payment_error",
            	{product_id=product_d, users=users, user_id=user_id,
            	error=details.error}
            )
            -- item 3303
            return false, details.error
        else
            -- item 3300
            details.users = users
            details.product_id = product_id
            details.product_name = product.name
            details.max_diagrams = product.max_diagrams
            details.max_spaces = product.max_spaces
            details.currency = price_cfg.currency
            details.user_id = user_id
            -- item 4033
            details.product_code = build_product_code(details)
            details.product_pay_name
             = "DrakonHub subscription: "
             .. details.product_code
            -- item 3298
            return true, details
        end
    else
        -- item 3335
        ej.info(
        	"px2_calculate_payment_error",
        	{product_id=product_d, users=users, user_id=user_id}
        )
        -- item 3296
        return false, "MES_BAD_PRODUCT"
    end
end

function px2_callback(text)
    -- item 3653
    local data = utils.parse_query(text)
    local agreement_id = data.orderId
    -- item 3654
    if agreement_id then
        -- item 3684
        local agreement, order_ref
         = db.agreement_get(agreement_id)
        -- item 3685
        if agreement then
            -- item 3687
            local user_id = agreement.user_id
            -- item 3686
            local language = get_user_language(
            	user_id
            )
            -- item 3692
            if agreement.state == "created" then
                -- item 3688
                local ok, result = payex.complete(
                	agreement_id,
                	order_ref,
                	user_id
                )
                -- item 3689
                if ok then
                    -- item 3691
                    receipt = on_px2_complete(
                    	user_id,
                    	agreement_id,
                    	agreement,
                    	result,
                    	language
                    )
                end
            else
                -- item 4051
                local paid_now = on_autopay_success(
                	user_id,
                	agreement_id,
                	agreement,
                	data.transactionNumber,
                	"autopay",
                	language
                )
                -- item 4035
                if paid_now then
                    
                else
                    -- item 3706
                    ej.info(
                      "ignore_callback",
                      {
                        user_id = user_id,
                        reason = 
                    "Complete/Autopay called before, agreement active",
                        agreement_id = agreement_id,
                        order_ref = order_ref
                      }
                    )
                end
            end
        end
    else
        -- item 3656
        ej.info("missing orderId in callback", data)
    end
end

function read_file_cached(filename)
    -- item 242
    local fullname = global_cfg.static_dir
      .. "/" .. filename
    -- item 220
    local file = file_cache[filename]
    -- item 225
    local now = clock.time()
    -- item 221
    if (file) and (not (now > file.expiry)) then
        -- item 224
        return file.data
    else
        -- item 228
        local data = utils.read_all_bytes(fullname)
        -- item 243
        if data then
            -- item 227
            local expiry = now + global_cfg.file_timeout
            -- item 247
            local file_info = {
            	expiry = expiry,
            	data = data
            }
            -- item 248
            file_cache[filename] = file_info
            -- item 246
            return data
        else
            -- item 249
            return nil
        end
    end
end

function redeem_coupon(user_id, code)
    -- item 2300
    lic.update_coupon(
    	code,
    	{redeemed_by=user_id}
    )
    -- item 2301
    ej.info(
    	"redeem_coupon",
    	{user_id=user_id, coupon=code}
    )
end

function redirect(from, to)
    -- item 4821
    local handler = function(req)
    	return redirect_handler(to)
    end
    -- item 4811
    router:route({ path = from }, handler)
end

function redirect_handler(location)
    -- item 4820
    local headers = {
    	Location = location
    }
    -- item 4818
    local resp = {
    	status = 301,
    	headers = headers
    }
    -- item 4819
    return resp
end

function replace_many(text, what)
    for key, value in pairs(what) do
        -- item 1983
        text = text:gsub(key, value)
    end
    -- item 1982
    return text
end

function result_from_message(headers, message)
    -- item 745
    local code
    -- item 7340001
    if message == "ERR_NOT_FOUND" then
        -- item 742
        code = 404
    else
        -- item 7340002
        if message == "ERR_ACCESS_DENIED" then
            -- item 743
            code = 403
        else
            -- item 7340003
            if message == "ERR_PAYMENT_FAILED" then
                -- item 2497
                code = 500
            else
                -- item 744
                code = 400
            end
        end
    end
    -- item 746
    return make_json_error(code, headers, message)
end

function route(path, handler)
    -- item 399
    router:route({ path = path }, handler)
end

function save_report(path, report, email)
    -- item 1486
    local data = json.encode(report)
    -- item 1487
    utils.write_all_bytes(path, data)
    -- item 1488
    local subject = report.type .. "-" .. tostring(report.user)
    -- item 1490
    local text = "Feedback report\n\n"
    text = text .. "type: " .. tostring(report.type) .. "\n"
    text = text .. "url: " .. tostring(report.url) .. "\n"
    text = text .. "user: " .. tostring(report.user) .. "\n"
    text = text .. "errorUrl: " .. tostring(report.errorUrl) .. "\n"
    text = text .. "section: " .. tostring(report.section) .. "\n"
    text = text .. "errorMsg: " .. tostring(report.errorMsg) .. "\n"
    text = text .. "message: " .. tostring(report.message) .. "\n"
    -- item 2577
    if email then
        -- item 2580
        text = text .. "email: " .. email .. "\n"
    end
    -- item 1653
    if report.type == "crash" then
        -- item 1656
        ej.info(
        	"crash",
        	{errorMsg=report.errorMsg}
        )
    end
    -- item 1491
    if report.trace then
        -- item 1496
        text = text .. "trace:\n"
        for _, step in ipairs(report.trace) do
            -- item 1695
            local stepj = json.encode(step)
            -- item 1497
            text = text .. stepj .. "\n"
        end
    end
    -- item 4997
    if (report.type == "feedback") or (global_cfg.email_on_crash) then
        -- item 1489
        send_mail(
        	"system",
        	global_cfg.feedback_email,
        	subject,
        	text,
        	nil,
        	path
        )
    end
end

function send_autopay_email(user_id, receipt, language, success)
    -- item 3820
    local user = vud.get_user(user_id)
    local html_file, text_file, sub_id
    -- item 3834
    if success then
        -- item 3837
        html_file = "auto_ok.html"
        text_file = "auto_ok.txt"
        subj_id = "MES_AUTO_OK_SUBJECT"
    else
        -- item 3838
        html_file = "auto_err.html"
        text_file = "auto_err.txt"
        subj_id = "MES_AUTO_ERR_SUBJECT"
    end
    -- item 3821
    local html = mail.get_template(
    	language,
    	html_file
    )
    -- item 3822
    local text = mail.get_template(
    	language,
    	text_file
    )
    -- item 3826
    local subject = trans.translate(
    	language,
    	"index",
    	subj_id
    )
    -- item 4032
    local renew = global_cfg.my_site
      .. "/buy"
    -- item 3830
    local variables = {
    
    	VALUE_PRODUCT_NAME = receipt.product_name,
    	VALUE_PRICE_PER_USER = receipt.price,
    	VALUE_NUM_USERS = receipt.users,
    	VALUE_TOTAL = receipt.total,
    	VALUE_ORDER_ID = receipt.trans_id,
    	VALUE_MVA = receipt.mva,
    	RENEW_LINK = renew,
    
    	MES_PRODUCT_NAME = translate(language, "MES_PRODUCT_NAME"),
    	MES_PRICE_PER_USER = translate(language, "MES_PRICE_PER_USER"),
    	MES_NUM_USERS = translate(language, "MES_NUM_USERS"),
    	MES_TOTAL = translate(language, "MES_TOTAL"),
    	MES_ORDER_ID = translate(language, "MES_ORDER_ID"),
    	MES_MVA = translate(language, "MES_MVA")
    }
    -- item 3831
    text = replace_many(text, variables)
    html = replace_many(html, variables)
    -- item 3832
    text = text:gsub("<br />", " ")
    -- item 3825
    send_mail(
    	user_id,
    	user.email,
    	subject,
    	text,
    	html,
    	nil
    )
end

function send_capture(session, lump)
    -- item 530
    if global_cfg.use_capture then
        -- item 483
        local url = "https://www.google.com/recaptcha/api/siteverify"
        -- item 481
        local data = string.format(
        	"secret=%s&response=%s",
        	external_creds.cap_secret,
        	lump
        )
        -- item 486
        local mime = "application/x-www-form-urlencoded"
        -- item 2375
        local body = {
        	data = data,
        	url = url,
        	mime = mime,
        	result = "json"
        }
        -- item 2372
        local result = utils.msgpack_call(
        	"localhost",
        	global_cfg.https_sender_port,
        	body
        )
        -- item 2368
        if result then
            -- item 2371
            if result.success then
                -- item 485
                return true
            else
                -- item 3166
                ej.info("captcha error", result)
                -- item 2370
                return false
            end
        else
            -- item 3163
            ej.info("captcha error - no result", {})
            -- item 2370
            return false
        end
    else
        -- item 533
        ej.info(
        	"skipping captcha",
        	{session_id = session.session_id}
        )
        -- item 535
        return true
    end
end

function send_congrat_email(user_id, receipt, language)
    -- item 2516
    local user = vud.get_user(user_id)
    -- item 2517
    local html = mail.get_template(
    	language,
    	"congrat.html"
    )
    -- item 2518
    local text = mail.get_template(
    	language,
    	"congrat.txt"
    )
    -- item 2522
    local subject = trans.translate(
    	language,
    	"index",
    	"MES_PAYMENT_CONFIRMATION"
    )
    -- item 2777
    local completed = translate(
    	language,
    	"MES_PURCHASE_COMPLETED_TEXT"
    )
    -- item 2529
    local variables = {
    	USER_NAME = user.name,
    	MES_PURCHASE_COMPLETED_TEXT = completed,
    	VALUE_PRODUCT_NAME = receipt.product_name,
    	VALUE_MAX_DIAGRAMS = receipt.max_diagrams,
    	VALUE_MAX_SPACES = receipt.max_spaces,
    	VALUE_PRICE_PER_USER = receipt.price,
    	VALUE_NUM_USERS = receipt.users,
    	VALUE_TOTAL = receipt.total,
    	VALUE_ORDER_ID = receipt.trans_id,
    	VALUE_DATE = receipt.date,
    	VALUE_MVA = receipt.mva,
    
    	MES_PRODUCT_NAME = translate(language, "MES_PRODUCT_NAME"),
    	MES_MAX_DIAGRAMS = translate(language, "MES_MAX_DIAGRAMS"),
    	MES_MAX_SPACES = translate(language, "MES_MAX_SPACES"),
    	MES_PRICE_PER_USER = translate(language, "MES_PRICE_PER_USER"),
    	MES_NUM_USERS = translate(language, "MES_NUM_USERS"),
    	MES_TOTAL = translate(language, "MES_TOTAL"),
    	MES_ORDER_ID = translate(language, "MES_ORDER_ID"),
    	MES_ORDER_DATE = translate(language, "MES_ORDER_DATE"),
    	MES_MVA = translate(language, "MES_MVA")
    }
    -- item 2530
    text = replace_many(text, variables)
    html = replace_many(html, variables)
    -- item 2565
    text = text:gsub("<br />", " ")
    -- item 2521
    send_mail(
    	user_id,
    	user.email,
    	subject,
    	text,
    	html,
    	nil
    )
end

function send_expiration(user_id, filename, subj_id)
    -- item 2049
    local user = vud.get_user(user_id)
    -- item 2052
    if user then
        -- item 2050
        local license = lic.get_raw_license(user.license)
        -- item 2055
        if license then
            -- item 2056
            local language = get_user_language(user_id)
            -- item 2057
            local product_name = build_product_name(
            	language,
            	license.product_id,
            	license.limits.max_users
            )
            -- item 2051
            local expiry = localize_time(
            	language,
            	license.expiry
            )
            -- item 2043
            local html = mail.get_template(
            	language,
            	filename .. ".html"
            )
            -- item 2044
            local text = mail.get_template(
            	language,
            	filename .. ".txt"
            )
            -- item 2928
            local renew = global_cfg.my_site
              .. "/buy"
            -- item 2047
            local variables = {
            	USER_NAME = user.name,
            	PRODUCT_NAME = product_name,
            	EXPIRY_DATE = expiry,
            	RENEW_LINK = renew
            }
            -- item 2048
            text = replace_many(text, variables)
            html = replace_many(html, variables)
            -- item 2046
            local subject = translate(
            	language,
            	subj_id
            )
            -- item 2061
            log.info("send mail to: " .. user_id)
            -- item 2045
            send_mail(
            	user_id,
            	user.email,
            	subject,
            	text,
            	html,
            	nil
            )
        end
    end
end

function send_expiration_notice(user_id)
    -- item 2059
    send_expiration(
    	user_id,
    	"exp",
    	"MES_LICENSE_EXPIRED"
    )
end

function send_expiration_soon(user_id, expiry)
    -- item 2060
    send_expiration(
    	user_id,
    	"exp_warning",
    	"MES_LICENSE_WILL_EXPIRE"
    )
end

function send_mail(user_id, to, subject, text, html, attach)
    -- item 3574
    mail.send_mail(
    	user_id,
    	to,
    	subject,
    	text,
    	html,
    	attach
    )
end

function send_welcome_email(user_id, language, password)
    -- item 4239
    local user = vud.get_user(user_id)
    -- item 4240
    local html = mail.get_template(
    	language,
    	"email-welcome.html"
    )
    -- item 4241
    local text = mail.get_template(
    	language,
    	"email-welcome.txt"
    )
    -- item 4243
    local subject = trans.translate(
    	language,
    	"index",
    	"MES_WELCOME"
    )
    -- item 4247
    local variables = {
    	VALUE_USER = user.name,
    	VALUE_PASSWORD = password
    }
    -- item 4248
    text = replace_many(text, variables)
    html = replace_many(html, variables)
    -- item 4249
    text = text:gsub("<br />", " ")
    -- item 4242
    send_mail(
    	user_id,
    	user.email,
    	subject,
    	text,
    	html,
    	nil
    )
end

function send_welcome_email_later(user_id, language, password)
    -- item 4351
    local task = function()
    	send_welcome_email(user_id, language, password)
    end
    -- item 4352
    fiber.create(task)
end

function serve_file(req, headers, filename)
    -- item 587
    local method = req:method()
    -- item 583
    if method == "GET" then
        -- item 588
        local data = read_file_cached(filename)
        -- item 589
        if data then
            -- item 596
            set_content_type(
            	headers,
            	filename
            )
            -- item 591
            expires_later(headers)
            -- item 586
            return {
            	status = 200,
            	headers = headers,
            	body = data
            }
        else
            -- item 595
            expires_now(headers)
            -- item 594
            return make_json_error(
            	404,
            	headers,
            	"ERR_FILE_NOT_FOUND"
            )
        end
    else
        -- item 593
        expires_now(headers)
        -- item 592
        return make_json_error(
        	400,
        	headers,
        	"ERR_BAD_HTTP_METHOD"
        )
    end
end

function set_content_type(headers, filename)
    -- item 306
    local type = utils.get_mime(
    	filename,
    	"text/html; charset=utf-8"
    )
    -- item 307
    headers["content-type"] = type
end

function set_session_cookie(headers, session_id)
    -- item 383
    local max_age = 3600 * 24 * 365 * 10
    -- item 385
    local expires_time = clock.time() + max_age
    local expires = cookie_date(expires_time)
    -- item 4870
    local format = "session_id=%s; Expires=%s; Max-Age=%d; Path=/; HttpOnly;"
    -- item 4867
    if global_cfg.insecure_cookie then
        
    else
        -- item 4871
        format = format .. " Secure;"
    end
    -- item 382
    local cookie = string.format(
      format,
      session_id,
      expires,
      max_age
    )
    -- item 384
    headers["set-cookie"] = cookie
end

function start()
    -- item 5005
    local options = {
    	log_errors = true
    }
    -- item 5006
    utils.add_set(
    	global_cfg.http_options,
    	options
    )
    -- item 5004
    httpd = http.new(
    	global_cfg.host,
    	global_cfg.port,
    	options
    )
    -- item 5008
    local roptions = {
    	charset = "utf8"
    }
    -- item 5007
    router = http_router.new(roptions)
    httpd:set_router(router)
    -- item 266
    route("/static/:filename", static_handler)
    route("/static/fonts/:filename", static_handler)
    route("/static/libs/:filename", static_handler)
    route("/static/images/:filename", static_handler)
    -- item 710
    route("/api/:method/:first/:second/:third", api_handler)
    route("/api/:method/:first/:second", api_handler)
    route("/api/:method/:first", api_handler)
    -- item 24
    route("/api/:method", api_handler)
    -- item 5
    route("/robots.txt", handle("robots.txt"))
    route("/favicon.ico", handle("favicon.ico"))
    -- item 4436
    temp_content_route("")
    temp_content_route("logon")
    temp_content_route("signup")
    temp_content_route("team")
    temp_route("/welcome", "welcome.html.el", false)
    -- item 4440
    temp_content_route("start-drakon")
    temp_content_route("start-mind-map")
    -- item 4113
    if global_cfg.on_premises then
        
    else
        -- item 4994
        temp_route("/terms", "terms.html.el", true)
        -- item 4993
        temp_content_route("drakonhub-source")
        -- item 4822
        redirect("/docs", "/read/docs")
        redirect("/read/sitemap", "/read/docs")
        -- item 4824
        land_route("/land/:id")
        -- item 4433
        temp_content_route("drakon")
        temp_content_route("drakon-examples")
        temp_content_route("drakon-reference")
        temp_content_route("how-to-flowchart")
        temp_content_route("how-to-mind-map")
        -- item 4435
        temp_content_route("video-how-to-flowchart")
        temp_content_route("video-how-to-mind-map")
        temp_content_route("video-drakon-part-1")
        temp_content_route("video-drakon-part-2")
        -- item 4457
        temp_land_route("/flowchart/ultra", "flowchart_land1.html.el")
        -- item 4575
        temp_read_route("/read/:id")
        -- item 3167
        temp_route(
        	"/googlee28387d91f342a24.html",
        	"googlee28387d91f342a24.html.el",
        	true
        )
        -- item 4094
        temp_route("/landbus", "landbus.html.el", true)
        temp_route_local("/landbus", "landbus.html.el", true)
        -- item 2566
        
        temp_route("/welcome-trial", "welcome-trial.html.el", false)
        -- item 1694
        temp_route_local("/unsubscribe/:user_id/:unid", "unsub.html.el", true)
    end
    -- item 1192
    temp_route("/account", "account.html.el", true)
    -- item 1193
    temp_route("/reset", "reset.html.el", true)
    temp_route("/test", "cprobe.html.el", true)
    -- item 1200
    temp_route("/try-me", "ide3.html.el", false)
    -- item 4101
    temp_route("/ide2/doc/:space_id/:folder_id", "ide2.html.el", false)
    temp_route("/ide2/trash", "ide2.html.el", false)
    temp_route("/ide2/spaces", "ide2.html.el", false)
    temp_route("/ide2/recent", "ide2.html.el", false)
    -- item 4102
    temp_route("/ide/doc/:space_id/:folder_id", "ide3.html.el", false)
    temp_route("/ide/trash", "ide3.html.el", false)
    temp_route("/ide/spaces", "ide3.html.el", false)
    temp_route("/ide/recent", "ide3.html.el", false)
    temp_route("/ide/dashboard", "ide3.html.el", false)
    -- item 214
    api("account", "GET", true, false, api_account)
    api("own_spaces", "GET", true, false, api_get_own_spaces)
    api("license", "GET", true, false, api_get_license)
    api("logon", "POST", false, false, api_logon)
    api("logout", "POST", false, false, api_logout)
    api("create_user", "POST", false, false, api_create_user)
    api("create_user_email", "POST", false, false, api_create_user_email)
    api("update_user", "POST", true, false, api_update_user)
    api("delete_user", "POST", true, false, api_delete_user)
    api("pass", "POST", true, false, api_pass)
    api("set_ref", "POST", false, false, api_set_ref)
    -- item 711
    api("visit", "GET", false, false, api_visit_folder)
    api("folder", "GET", false, false, api_get_folder)
    api("folder", "POST", true, false, api_create_folder)
    api("folder", "PUT", true, false, api_update_folder)
    api("many", "POST", true, false, api_many)
    api("trash", "GET", true, false, api_get_trash)
    api("trash", "DELETE", true, false, api_clear_trash)
    api("restore", "POST", true, false, api_restore)
    api("tree", "GET", true, false, api_tree)
    api("access", "POST", true, false, api_access)
    api("access", "DELETE", true, false, api_access)
    api("access", "GET", true, false, api_get_access)
    api("recent", "GET", true, false, api_recent)
    api("save_try", "POST", true, false, api_save_try)
    api("find_users", "POST", false, false, api_find_users)
    api("space", "POST", true, false, api_create_space)
    api("space", "DELETE", true, false, api_delete_space)
    api("multi_access", "POST", true, false, api_multi_access)
    api("reset_pass", "POST", false, false, api_reset_pass)
    api("def_query", "POST", false, false, api_def_query)
    -- item 4118
    api("search", "POST", false, false, api_start_search)
    api("search", "GET", false, false, api_get_search)
    api("search", "DELETE", false, false, api_delete_search)
    -- item 1693
    api("unsubscribe", "POST", false, false, api_unsubscribe)
    -- item 3414
    api("stop_subscription", "POST", true, false, api_stop_subscription)
    -- item 1373
    api("download", "GET", false, false, api_get_download)
    api("download", "POST", false, false, api_download)
    api("download_svg", "POST", false, false, api_download_svg)
    -- item 933
    api("adm", "GET", true, true, api_get_adm)
    api("adm", "POST", true, true, api_post_adm)
    api("summary", "GET", true, true, api_get_summary)
    api("gen_coupons", "POST", true, true, api_gen_coupons)
    -- item 1003
    api("feedback", "POST", false, false, api_feedback)
    -- item 771
    api("edit", "POST", true, false, api_edit)
    api("tag", "GET", false, false, api_get_tag)
    -- item 683
    api("theme", "GET", true, false, api_get_theme)
    api("theme", "POST", true, false, api_set_theme)
    -- item 1020
    api("diatest", "GET", true, true, api_get_diatest)
    api("diatest", "POST", true, true, api_save_diatest)
    api("diatest", "DELETE", true, true, api_delete_diatest)
    -- item 14
    httpd:start()
end

function start_trial(session_id, user_id, old_license_id, product_id)
    -- item 4774
    local product = utils.get_product(
    	product_id
    )
    -- item 4777
    local details = {}
    -- item 4775
    details.users = product.min_users
    details.product_id = product_id
    details.product_name = product.name
    details.max_diagrams = product.max_diagrams
    details.max_spaces = product.max_spaces
    -- item 4781
    local expiry = os.time() + 
    	utils.days_to_secs(price_cfg.trial_days)
    -- item 4768
    local trans_id = create_transaction(
    	user_id,
    	"trial",
    	details
    )
    -- item 4770
    complete_transaction(
    	user_id,
    	trans_id,
    	"success"
    )
    -- item 4784
    lic.delete_license(old_license_id)
    -- item 4771
    local agreement_id = nil
    -- item 4772
    local license_id = create_license_for_user(
    	user_id,
    	details.product_id,
    	details.max_diagrams,
    	details.max_spaces,
    	details.users,
    	expiry,
    	trans_id,
    	agreement_id,
    	"trial"
    )
    -- item 4782
    lic.update_license(
    	license_id,
    	{is_trial=true}
    )
    -- item 4783
    vud.set_user_prop(
    	user_id,
    	"had_trial",
    	true
    )
    -- item 4788
    ej.info(
    	"trial",
    	{user_id=user_id, product_id=product_id,
    	users=details.users,
    	session_id=session_id}
    )
end

function static_handler(req)
    -- item 4873
    local parts = utils.split(req:path(), "/")
    local filename
    -- item 4874
    if #parts == 3 then
        -- item 4878
        filename = parts[2] .. "/" .. parts[3]
    else
        -- item 4877
        filename = parts[2]
    end
    -- item 330
    local headers = {}
    -- item 270
    return serve_file(req, headers, filename)
end

function suggest_product(session, count, get_limit)
    -- item 1846
    local user = vud.get_user(session.user_id)
    -- item 1847
    local license = lic.get_raw_license(user.license)
    -- item 1851
    local product_id
    -- item 1848
    if license then
        -- item 1852
        product_id = license.product_id
    else
        -- item 1853
        product_id = "basic"
    end
    while true do
        -- item 1854
        if product_id then
            
        else
            -- item 1863
            return nil
        end
        -- item 1859
        local limit = get_limit(
          product_id
        )
        -- item 1857
        if limit >= count then
            -- item 1862
            return product_id
        end
        -- item 1860
        product_id = get_next_product(product_id)
    end
end

function take_download(download_id)
    -- item 1426
    local record = ping_files[download_id]
    -- item 1422
    if record then
        -- item 1425
        ping_files[download_id] = nil
    end
    -- item 1427
    return record
end

function temp_content_route(path)
    -- item 4425
    local root_path = "/" .. path
    local path_ru = "/ru" .. root_path
    local path_en = "/en" .. root_path
    -- item 4427
    local caching_allowed = true
    local file = "content.html.el"
    -- item 4573
    local cinfo_maker = function(req, language)
    	return create_content_cinfo(language, path)
    end
    -- item 4424
    router:route(
    	{path=path_ru, file=file},
    	make_template("index", "ru", caching_allowed, cinfo_maker)
    )
    -- item 4426
    router:route(
    	{path=path_en, file=file},
    	make_template("index", "en", caching_allowed, cinfo_maker)
    )
    -- item 4434
    router:route(
    	{path=root_path, file=file},
    	make_template("index", "", caching_allowed, cinfo_maker)
    )
end

function temp_land_route(path, file)
    -- item 4452
    local path_ru = "/ru" .. path
    local path_en = "/en" .. path
    -- item 4454
    local caching_allowed = true
    -- item 4574
    local cinfo_maker = function(req, language)
    	return create_content_cinfo(language, path)
    end
    -- item 4451
    router:route(
    	{path=path_ru, file=file},
    	make_template("index", "ru", caching_allowed, cinfo_maker)
    )
    -- item 4453
    router:route(
    	{path=path_en, file=file},
    	make_template("index", "en", caching_allowed, cinfo_maker)
    )
    -- item 4456
    router:route(
    	{path=path, file=file},
    	make_template("index", "", caching_allowed, cinfo_maker)
    )
end

function temp_read_route(path)
    -- item 4581
    local root_path = path
    local path_ru = "/ru" .. root_path
    local path_en = "/en" .. root_path
    -- item 4583
    local caching_allowed = true
    local file = "content.html.el"
    -- item 4586
    local cinfo_maker = create_read_cinfo
    -- item 4580
    router:route(
    	{path=path_ru, file=file},
    	make_template("index", "ru", caching_allowed, cinfo_maker)
    )
    -- item 4582
    router:route(
    	{path=path_en, file=file},
    	make_template("index", "en", caching_allowed, cinfo_maker)
    )
    -- item 4585
    router:route(
    	{path=root_path, file=file},
    	make_template("index", "", caching_allowed, cinfo_maker)
    )
end

function temp_route(path, file, caching_allowed)
    -- item 1199
    router:route(
    	{path=path, file=file},
    	make_template("index", "", caching_allowed, nil)
    )
end

function temp_route_local(path, file, caching_allowed)
    -- item 4429
    local path_ru = "/ru" .. path
    local path_en = "/en" .. path
    -- item 4428
    router:route(
    	{path=path_ru, file=file},
    	make_template("index", "ru", caching_allowed, nil)
    )
    -- item 4430
    router:route(
    	{path=path_en, file=file},
    	make_template("index", "en", caching_allowed, nil)
    )
end

function to_user_names(ids)
    -- item 1298
    local result = {}
    for _, user_id in ipairs(ids) do
        -- item 1302
        local user = vud.get_user(user_id)
        -- item 1303
        if user then
            -- item 1306
            table.insert(
            	result,
            	user.name
            )
        end
    end
    -- item 1299
    return result
end

function translate(language, text)
    -- item 2067
    local result = trans.translate(
    	language,
    	"index",
    	text
    )
    -- item 2069
    -- log.info(text .. " -> " .. result
    -- .. " (" .. language .. ")")
    -- item 2068
    return result
end

function try_autopay(agreement_id)
    -- item 3780
    local now = os.time()
    -- item 3774
    local agreement = db.agreement_get(
    	agreement_id
    )
    -- item 3776
    if is_agreement_active(agreement) then
        -- item 3777
        if now > agreement.due then
            -- item 3862
            local user_id = agreement.user_id
            local user = vud.get_user(user_id)
            -- item 3863
            if user then
                -- item 3864
                local language = get_user_language(
                	user_id
                )
                -- item 3782
                agreement.agreement_id = agreement_id
                -- item 3778
                local pay_ok, result = payex.autopay(
                	agreement,
                	user_id
                )
                -- item 3783
                if pay_ok then
                    -- item 4047
                    on_autopay_success(
                    	user_id,
                    	agreement_id,
                    	agreement,
                    	result.trans_number,
                    	result.method,
                    	language
                    )
                else
                    -- item 3807
                    local receipt = build_receipt(
                          agreement_id,
                          agreement,
                          language
                    )
                    -- item 3839
                    local due = now + AUTOPAY_RETRY_DELAY_SEC
                    -- item 3853
                    db.begin()
                    -- item 3840
                    local sfields = db.scheduled_get(agreement_id)
                    -- item 3841
                    if sfields then
                        -- item 3845
                        local retries = sfields.retries - 1
                        -- item 3846
                        if retries > 0 then
                            -- item 3852
                            db.scheduled_upsert(
                              agreement_id,
                              {due = due,
                               retries = retries}
                            )
                            -- item 3856
                            agreement = update_agreement(
                              agreement_id,
                              {
                                state = "retrying"
                              }	
                            )
                            -- item 3854
                            db.commit()
                            -- item 3865
                            ej.info(
                              "schedule_autopay_retry",
                              {user_id = user_id,
                              agreement_id = agreement_id}
                            )
                        else
                            -- item 4879
                            db.scheduled_delete(agreement_id)
                            -- item 3861
                            lic.update_license(
                            	user.license,
                            	{active = false}
                            )
                            -- item 3859
                            update_users_spaces(user_id)
                            -- item 3858
                            agreement = update_agreement(
                              agreement_id,
                              {
                                state = "unpaid"
                              }	
                            )
                            -- item 3855
                            db.commit()
                            -- item 3860
                            ej.info(
                              "license_unpaid",
                              {user_id=user_id,
                              license_id=user.license,
                              agreement_id = agreement_id}
                            )
                            -- item 3857
                            send_autopay_email(
                            	user_id,
                            	receipt,
                            	language,
                            	false
                            )
                        end
                    else
                        -- item 3844
                        db.scheduled_upsert(
                          agreement_id,
                          {due = due,
                           retries = AUTOPAY_RETRIES - 1}
                        )
                        -- item 3856
                        agreement = update_agreement(
                          agreement_id,
                          {
                            state = "retrying"
                          }	
                        )
                        -- item 3854
                        db.commit()
                        -- item 3865
                        ej.info(
                          "schedule_autopay_retry",
                          {user_id = user_id,
                          agreement_id = agreement_id}
                        )
                    end
                end
            end
        end
    else
        -- item 3880
        db.scheduled_delete(agreement_id)
    end
end

function update_agreement(agreement_id, fields)
    -- item 3324
    local data, order_ref = db.agreement_get(
    	agreement_id
    )
    -- item 3325
    if data then
        for key, value in pairs(fields) do
            -- item 3331
            data[key] = value
        end
        -- item 3334
        data.when_updated = clock.time()
        -- item 3623
        db.agreement_update(
        	agreement_id,
        	order_ref,
        	data
        )
        -- item 3540
        return data
    else
        -- item 3539
        return nil
    end
end

function update_users_spaces(user_id)
    -- item 4919
    local spaces = get_own_spaces(user_id)
    for _, space_id in ipairs(spaces) do
        -- item 2192
        space.update_space_limits(space_id)
    end
end

function user_exists(id_email)
    -- item 3188
    if vud.find_user(id_email) then
        -- item 3191
        return true
    else
        -- item 3192
        return false
    end
end

function write_font_footer(font, fhandle)
    -- item 1619
    fhandle:write("\") format('woff');\n}\n")
end

function write_font_header(font, fhandle)
    -- item 1625
    local weight, style
    -- item 1626
    if font.bold then
        -- item 1630
        weight = "bold"
    else
        -- item 1629
        weight = "normal"
    end
    -- item 1631
    if font.italic then
        -- item 1635
        style = "italic"
    else
        -- item 1634
        style = "normal"
    end
    -- item 1620
    fhandle:write("@font-face {\n")
    -- item 1621
    fhandle:write("  font-family: '" .. font.family .. "';\n")
    -- item 1623
    fhandle:write("  font-style: " .. style .. ";\n")
    -- item 1624
    fhandle:write("  font-weight: " .. weight .. ";\n")
    -- item 1622
    fhandle:write("  src: url(\"data:font/woff;base64,")
end

function wrong_api_handler(req, session, headers)
    -- item 565
    return make_json_error(400, headers, "ERR_BAD_API")
end


module = {
	start = start,
	check_license = check_license,
	check_scheduled = check_scheduled,
	send_expiration_notice = send_expiration_notice,
	send_expiration_soon = send_expiration_soon,
	create_default_license = create_default_license,
	update_users_spaces = update_users_spaces,
	delete_user = delete_user,
	inject_send_mail = inject_send_mail
}

return module
